
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserFriendship
 * 
 */
export type UserFriendship = $Result.DefaultSelection<Prisma.$UserFriendshipPayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model UserMatch
 * 
 */
export type UserMatch = $Result.DefaultSelection<Prisma.$UserMatchPayload>
/**
 * Model Block
 * 
 */
export type Block = $Result.DefaultSelection<Prisma.$BlockPayload>
/**
 * Model Channel
 * 
 */
export type Channel = $Result.DefaultSelection<Prisma.$ChannelPayload>
/**
 * Model UserChannel
 * 
 */
export type UserChannel = $Result.DefaultSelection<Prisma.$UserChannelPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Status: {
  OFFLINE: 'OFFLINE',
  ONLINE: 'ONLINE',
  INGAME: 'INGAME'
};

export type Status = (typeof Status)[keyof typeof Status]

}

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userFriendship`: Exposes CRUD operations for the **UserFriendship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserFriendships
    * const userFriendships = await prisma.userFriendship.findMany()
    * ```
    */
  get userFriendship(): Prisma.UserFriendshipDelegate<ExtArgs>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs>;

  /**
   * `prisma.userMatch`: Exposes CRUD operations for the **UserMatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserMatches
    * const userMatches = await prisma.userMatch.findMany()
    * ```
    */
  get userMatch(): Prisma.UserMatchDelegate<ExtArgs>;

  /**
   * `prisma.block`: Exposes CRUD operations for the **Block** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Blocks
    * const blocks = await prisma.block.findMany()
    * ```
    */
  get block(): Prisma.BlockDelegate<ExtArgs>;

  /**
   * `prisma.channel`: Exposes CRUD operations for the **Channel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channel.findMany()
    * ```
    */
  get channel(): Prisma.ChannelDelegate<ExtArgs>;

  /**
   * `prisma.userChannel`: Exposes CRUD operations for the **UserChannel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserChannels
    * const userChannels = await prisma.userChannel.findMany()
    * ```
    */
  get userChannel(): Prisma.UserChannelDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserFriendship: 'UserFriendship',
    Match: 'Match',
    UserMatch: 'UserMatch',
    Block: 'Block',
    Channel: 'Channel',
    UserChannel: 'UserChannel',
    Message: 'Message'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'userFriendship' | 'match' | 'userMatch' | 'block' | 'channel' | 'userChannel' | 'message'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserFriendship: {
        payload: Prisma.$UserFriendshipPayload<ExtArgs>
        fields: Prisma.UserFriendshipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFriendshipFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFriendshipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFriendshipFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFriendshipPayload>
          }
          findFirst: {
            args: Prisma.UserFriendshipFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFriendshipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFriendshipFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFriendshipPayload>
          }
          findMany: {
            args: Prisma.UserFriendshipFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFriendshipPayload>[]
          }
          create: {
            args: Prisma.UserFriendshipCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFriendshipPayload>
          }
          createMany: {
            args: Prisma.UserFriendshipCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserFriendshipDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFriendshipPayload>
          }
          update: {
            args: Prisma.UserFriendshipUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFriendshipPayload>
          }
          deleteMany: {
            args: Prisma.UserFriendshipDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserFriendshipUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserFriendshipUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFriendshipPayload>
          }
          aggregate: {
            args: Prisma.UserFriendshipAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserFriendship>
          }
          groupBy: {
            args: Prisma.UserFriendshipGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserFriendshipGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserFriendshipCountArgs<ExtArgs>,
            result: $Utils.Optional<UserFriendshipCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>,
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      UserMatch: {
        payload: Prisma.$UserMatchPayload<ExtArgs>
        fields: Prisma.UserMatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserMatchFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserMatchFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMatchPayload>
          }
          findFirst: {
            args: Prisma.UserMatchFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserMatchFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMatchPayload>
          }
          findMany: {
            args: Prisma.UserMatchFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMatchPayload>[]
          }
          create: {
            args: Prisma.UserMatchCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMatchPayload>
          }
          createMany: {
            args: Prisma.UserMatchCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserMatchDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMatchPayload>
          }
          update: {
            args: Prisma.UserMatchUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMatchPayload>
          }
          deleteMany: {
            args: Prisma.UserMatchDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserMatchUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserMatchUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMatchPayload>
          }
          aggregate: {
            args: Prisma.UserMatchAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserMatch>
          }
          groupBy: {
            args: Prisma.UserMatchGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserMatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserMatchCountArgs<ExtArgs>,
            result: $Utils.Optional<UserMatchCountAggregateOutputType> | number
          }
        }
      }
      Block: {
        payload: Prisma.$BlockPayload<ExtArgs>
        fields: Prisma.BlockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlockFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlockFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockPayload>
          }
          findFirst: {
            args: Prisma.BlockFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlockFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockPayload>
          }
          findMany: {
            args: Prisma.BlockFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockPayload>[]
          }
          create: {
            args: Prisma.BlockCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockPayload>
          }
          createMany: {
            args: Prisma.BlockCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BlockDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockPayload>
          }
          update: {
            args: Prisma.BlockUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockPayload>
          }
          deleteMany: {
            args: Prisma.BlockDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BlockUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BlockUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockPayload>
          }
          aggregate: {
            args: Prisma.BlockAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBlock>
          }
          groupBy: {
            args: Prisma.BlockGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BlockGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlockCountArgs<ExtArgs>,
            result: $Utils.Optional<BlockCountAggregateOutputType> | number
          }
        }
      }
      Channel: {
        payload: Prisma.$ChannelPayload<ExtArgs>
        fields: Prisma.ChannelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChannelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChannelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          findFirst: {
            args: Prisma.ChannelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChannelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          findMany: {
            args: Prisma.ChannelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>[]
          }
          create: {
            args: Prisma.ChannelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          createMany: {
            args: Prisma.ChannelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChannelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          update: {
            args: Prisma.ChannelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          deleteMany: {
            args: Prisma.ChannelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChannelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChannelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          aggregate: {
            args: Prisma.ChannelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChannel>
          }
          groupBy: {
            args: Prisma.ChannelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChannelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChannelCountArgs<ExtArgs>,
            result: $Utils.Optional<ChannelCountAggregateOutputType> | number
          }
        }
      }
      UserChannel: {
        payload: Prisma.$UserChannelPayload<ExtArgs>
        fields: Prisma.UserChannelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserChannelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserChannelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserChannelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserChannelPayload>
          }
          findFirst: {
            args: Prisma.UserChannelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserChannelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserChannelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserChannelPayload>
          }
          findMany: {
            args: Prisma.UserChannelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserChannelPayload>[]
          }
          create: {
            args: Prisma.UserChannelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserChannelPayload>
          }
          createMany: {
            args: Prisma.UserChannelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserChannelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserChannelPayload>
          }
          update: {
            args: Prisma.UserChannelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserChannelPayload>
          }
          deleteMany: {
            args: Prisma.UserChannelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserChannelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserChannelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserChannelPayload>
          }
          aggregate: {
            args: Prisma.UserChannelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserChannel>
          }
          groupBy: {
            args: Prisma.UserChannelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserChannelGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserChannelCountArgs<ExtArgs>,
            result: $Utils.Optional<UserChannelCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    userMatches: number
    userFriendships: number
    blocksInitiated: number
    blocksReceived: number
    channels: number
    createdChannels: number
    messages: number
    messagesReaded: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    userMatches?: boolean | UserCountOutputTypeCountUserMatchesArgs
    userFriendships?: boolean | UserCountOutputTypeCountUserFriendshipsArgs
    blocksInitiated?: boolean | UserCountOutputTypeCountBlocksInitiatedArgs
    blocksReceived?: boolean | UserCountOutputTypeCountBlocksReceivedArgs
    channels?: boolean | UserCountOutputTypeCountChannelsArgs
    createdChannels?: boolean | UserCountOutputTypeCountCreatedChannelsArgs
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
    messagesReaded?: boolean | UserCountOutputTypeCountMessagesReadedArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserMatchesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserMatchWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserFriendshipsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserFriendshipWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBlocksInitiatedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BlockWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBlocksReceivedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BlockWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChannelsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserChannelWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedChannelsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesReadedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }



  /**
   * Count Type MatchCountOutputType
   */

  export type MatchCountOutputType = {
    users: number
  }

  export type MatchCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | MatchCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchCountOutputType
     */
    select?: MatchCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserMatchWhereInput
  }



  /**
   * Count Type ChannelCountOutputType
   */

  export type ChannelCountOutputType = {
    users: number
    messages: number
  }

  export type ChannelCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | ChannelCountOutputTypeCountUsersArgs
    messages?: boolean | ChannelCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes

  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelCountOutputType
     */
    select?: ChannelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserChannelWhereInput
  }


  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }



  /**
   * Count Type MessageCountOutputType
   */

  export type MessageCountOutputType = {
    readBy: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    readBy?: boolean | MessageCountOutputTypeCountReadByArgs
  }

  // Custom InputTypes

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountReadByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    xp: number | null
    role: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    xp: number | null
    role: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    avatar: string | null
    username: string | null
    secretO2FA: string | null
    session: string | null
    xp: number | null
    role: number | null
    status: $Enums.Status | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    avatar: string | null
    username: string | null
    secretO2FA: string | null
    session: string | null
    xp: number | null
    role: number | null
    status: $Enums.Status | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    avatar: number
    username: number
    secretO2FA: number
    session: number
    xp: number
    role: number
    status: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    xp?: true
    role?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    xp?: true
    role?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    avatar?: true
    username?: true
    secretO2FA?: true
    session?: true
    xp?: true
    role?: true
    status?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    avatar?: true
    username?: true
    secretO2FA?: true
    session?: true
    xp?: true
    role?: true
    status?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    avatar?: true
    username?: true
    secretO2FA?: true
    session?: true
    xp?: true
    role?: true
    status?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    avatar: string
    username: string
    secretO2FA: string | null
    session: string | null
    xp: number
    role: number
    status: $Enums.Status
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    avatar?: boolean
    username?: boolean
    secretO2FA?: boolean
    session?: boolean
    xp?: boolean
    role?: boolean
    status?: boolean
    userMatches?: boolean | User$userMatchesArgs<ExtArgs>
    userFriendships?: boolean | User$userFriendshipsArgs<ExtArgs>
    blocksInitiated?: boolean | User$blocksInitiatedArgs<ExtArgs>
    blocksReceived?: boolean | User$blocksReceivedArgs<ExtArgs>
    channels?: boolean | User$channelsArgs<ExtArgs>
    createdChannels?: boolean | User$createdChannelsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    messagesReaded?: boolean | User$messagesReadedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    avatar?: boolean
    username?: boolean
    secretO2FA?: boolean
    session?: boolean
    xp?: boolean
    role?: boolean
    status?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    userMatches?: boolean | User$userMatchesArgs<ExtArgs>
    userFriendships?: boolean | User$userFriendshipsArgs<ExtArgs>
    blocksInitiated?: boolean | User$blocksInitiatedArgs<ExtArgs>
    blocksReceived?: boolean | User$blocksReceivedArgs<ExtArgs>
    channels?: boolean | User$channelsArgs<ExtArgs>
    createdChannels?: boolean | User$createdChannelsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    messagesReaded?: boolean | User$messagesReadedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      userMatches: Prisma.$UserMatchPayload<ExtArgs>[]
      userFriendships: Prisma.$UserFriendshipPayload<ExtArgs>[]
      blocksInitiated: Prisma.$BlockPayload<ExtArgs>[]
      blocksReceived: Prisma.$BlockPayload<ExtArgs>[]
      channels: Prisma.$UserChannelPayload<ExtArgs>[]
      createdChannels: Prisma.$ChannelPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      messagesReaded: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      avatar: string
      username: string
      secretO2FA: string | null
      session: string | null
      xp: number
      role: number
      status: $Enums.Status
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    userMatches<T extends User$userMatchesArgs<ExtArgs> = {}>(args?: Subset<T, User$userMatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    userFriendships<T extends User$userFriendshipsArgs<ExtArgs> = {}>(args?: Subset<T, User$userFriendshipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFriendshipPayload<ExtArgs>, T, 'findMany'> | Null>;

    blocksInitiated<T extends User$blocksInitiatedArgs<ExtArgs> = {}>(args?: Subset<T, User$blocksInitiatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, 'findMany'> | Null>;

    blocksReceived<T extends User$blocksReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$blocksReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, 'findMany'> | Null>;

    channels<T extends User$channelsArgs<ExtArgs> = {}>(args?: Subset<T, User$channelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserChannelPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdChannels<T extends User$createdChannelsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdChannelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findMany'> | Null>;

    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    messagesReaded<T extends User$messagesReadedArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesReadedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly secretO2FA: FieldRef<"User", 'String'>
    readonly session: FieldRef<"User", 'String'>
    readonly xp: FieldRef<"User", 'Int'>
    readonly role: FieldRef<"User", 'Int'>
    readonly status: FieldRef<"User", 'Status'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.userMatches
   */
  export type User$userMatchesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
    where?: UserMatchWhereInput
    orderBy?: UserMatchOrderByWithRelationInput | UserMatchOrderByWithRelationInput[]
    cursor?: UserMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMatchScalarFieldEnum | UserMatchScalarFieldEnum[]
  }


  /**
   * User.userFriendships
   */
  export type User$userFriendshipsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFriendship
     */
    select?: UserFriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendshipInclude<ExtArgs> | null
    where?: UserFriendshipWhereInput
    orderBy?: UserFriendshipOrderByWithRelationInput | UserFriendshipOrderByWithRelationInput[]
    cursor?: UserFriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFriendshipScalarFieldEnum | UserFriendshipScalarFieldEnum[]
  }


  /**
   * User.blocksInitiated
   */
  export type User$blocksInitiatedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
    where?: BlockWhereInput
    orderBy?: BlockOrderByWithRelationInput | BlockOrderByWithRelationInput[]
    cursor?: BlockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlockScalarFieldEnum | BlockScalarFieldEnum[]
  }


  /**
   * User.blocksReceived
   */
  export type User$blocksReceivedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
    where?: BlockWhereInput
    orderBy?: BlockOrderByWithRelationInput | BlockOrderByWithRelationInput[]
    cursor?: BlockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlockScalarFieldEnum | BlockScalarFieldEnum[]
  }


  /**
   * User.channels
   */
  export type User$channelsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
    where?: UserChannelWhereInput
    orderBy?: UserChannelOrderByWithRelationInput | UserChannelOrderByWithRelationInput[]
    cursor?: UserChannelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserChannelScalarFieldEnum | UserChannelScalarFieldEnum[]
  }


  /**
   * User.createdChannels
   */
  export type User$createdChannelsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    where?: ChannelWhereInput
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    cursor?: ChannelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * User.messagesReaded
   */
  export type User$messagesReadedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model UserFriendship
   */

  export type AggregateUserFriendship = {
    _count: UserFriendshipCountAggregateOutputType | null
    _avg: UserFriendshipAvgAggregateOutputType | null
    _sum: UserFriendshipSumAggregateOutputType | null
    _min: UserFriendshipMinAggregateOutputType | null
    _max: UserFriendshipMaxAggregateOutputType | null
  }

  export type UserFriendshipAvgAggregateOutputType = {
    id: number | null
    senderId: number | null
    targetId: number | null
  }

  export type UserFriendshipSumAggregateOutputType = {
    id: number | null
    senderId: number | null
    targetId: number | null
  }

  export type UserFriendshipMinAggregateOutputType = {
    id: number | null
    senderId: number | null
    targetId: number | null
    acceptedAt: Date | null
  }

  export type UserFriendshipMaxAggregateOutputType = {
    id: number | null
    senderId: number | null
    targetId: number | null
    acceptedAt: Date | null
  }

  export type UserFriendshipCountAggregateOutputType = {
    id: number
    senderId: number
    targetId: number
    acceptedAt: number
    _all: number
  }


  export type UserFriendshipAvgAggregateInputType = {
    id?: true
    senderId?: true
    targetId?: true
  }

  export type UserFriendshipSumAggregateInputType = {
    id?: true
    senderId?: true
    targetId?: true
  }

  export type UserFriendshipMinAggregateInputType = {
    id?: true
    senderId?: true
    targetId?: true
    acceptedAt?: true
  }

  export type UserFriendshipMaxAggregateInputType = {
    id?: true
    senderId?: true
    targetId?: true
    acceptedAt?: true
  }

  export type UserFriendshipCountAggregateInputType = {
    id?: true
    senderId?: true
    targetId?: true
    acceptedAt?: true
    _all?: true
  }

  export type UserFriendshipAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFriendship to aggregate.
     */
    where?: UserFriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFriendships to fetch.
     */
    orderBy?: UserFriendshipOrderByWithRelationInput | UserFriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserFriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFriendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFriendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserFriendships
    **/
    _count?: true | UserFriendshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserFriendshipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserFriendshipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserFriendshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserFriendshipMaxAggregateInputType
  }

  export type GetUserFriendshipAggregateType<T extends UserFriendshipAggregateArgs> = {
        [P in keyof T & keyof AggregateUserFriendship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserFriendship[P]>
      : GetScalarType<T[P], AggregateUserFriendship[P]>
  }




  export type UserFriendshipGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserFriendshipWhereInput
    orderBy?: UserFriendshipOrderByWithAggregationInput | UserFriendshipOrderByWithAggregationInput[]
    by: UserFriendshipScalarFieldEnum[] | UserFriendshipScalarFieldEnum
    having?: UserFriendshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserFriendshipCountAggregateInputType | true
    _avg?: UserFriendshipAvgAggregateInputType
    _sum?: UserFriendshipSumAggregateInputType
    _min?: UserFriendshipMinAggregateInputType
    _max?: UserFriendshipMaxAggregateInputType
  }

  export type UserFriendshipGroupByOutputType = {
    id: number
    senderId: number
    targetId: number
    acceptedAt: Date | null
    _count: UserFriendshipCountAggregateOutputType | null
    _avg: UserFriendshipAvgAggregateOutputType | null
    _sum: UserFriendshipSumAggregateOutputType | null
    _min: UserFriendshipMinAggregateOutputType | null
    _max: UserFriendshipMaxAggregateOutputType | null
  }

  type GetUserFriendshipGroupByPayload<T extends UserFriendshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserFriendshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserFriendshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserFriendshipGroupByOutputType[P]>
            : GetScalarType<T[P], UserFriendshipGroupByOutputType[P]>
        }
      >
    >


  export type UserFriendshipSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    targetId?: boolean
    acceptedAt?: boolean
    target?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFriendship"]>

  export type UserFriendshipSelectScalar = {
    id?: boolean
    senderId?: boolean
    targetId?: boolean
    acceptedAt?: boolean
  }

  export type UserFriendshipInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    target?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $UserFriendshipPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "UserFriendship"
    objects: {
      target: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      senderId: number
      targetId: number
      acceptedAt: Date | null
    }, ExtArgs["result"]["userFriendship"]>
    composites: {}
  }


  type UserFriendshipGetPayload<S extends boolean | null | undefined | UserFriendshipDefaultArgs> = $Result.GetResult<Prisma.$UserFriendshipPayload, S>

  type UserFriendshipCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFriendshipFindManyArgs, 'select' | 'include'> & {
      select?: UserFriendshipCountAggregateInputType | true
    }

  export interface UserFriendshipDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserFriendship'], meta: { name: 'UserFriendship' } }
    /**
     * Find zero or one UserFriendship that matches the filter.
     * @param {UserFriendshipFindUniqueArgs} args - Arguments to find a UserFriendship
     * @example
     * // Get one UserFriendship
     * const userFriendship = await prisma.userFriendship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFriendshipFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFriendshipFindUniqueArgs<ExtArgs>>
    ): Prisma__UserFriendshipClient<$Result.GetResult<Prisma.$UserFriendshipPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserFriendship that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFriendshipFindUniqueOrThrowArgs} args - Arguments to find a UserFriendship
     * @example
     * // Get one UserFriendship
     * const userFriendship = await prisma.userFriendship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFriendshipFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFriendshipFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserFriendshipClient<$Result.GetResult<Prisma.$UserFriendshipPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserFriendship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendshipFindFirstArgs} args - Arguments to find a UserFriendship
     * @example
     * // Get one UserFriendship
     * const userFriendship = await prisma.userFriendship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFriendshipFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFriendshipFindFirstArgs<ExtArgs>>
    ): Prisma__UserFriendshipClient<$Result.GetResult<Prisma.$UserFriendshipPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserFriendship that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendshipFindFirstOrThrowArgs} args - Arguments to find a UserFriendship
     * @example
     * // Get one UserFriendship
     * const userFriendship = await prisma.userFriendship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFriendshipFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFriendshipFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserFriendshipClient<$Result.GetResult<Prisma.$UserFriendshipPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserFriendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendshipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserFriendships
     * const userFriendships = await prisma.userFriendship.findMany()
     * 
     * // Get first 10 UserFriendships
     * const userFriendships = await prisma.userFriendship.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userFriendshipWithIdOnly = await prisma.userFriendship.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFriendshipFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFriendshipFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFriendshipPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserFriendship.
     * @param {UserFriendshipCreateArgs} args - Arguments to create a UserFriendship.
     * @example
     * // Create one UserFriendship
     * const UserFriendship = await prisma.userFriendship.create({
     *   data: {
     *     // ... data to create a UserFriendship
     *   }
     * })
     * 
    **/
    create<T extends UserFriendshipCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserFriendshipCreateArgs<ExtArgs>>
    ): Prisma__UserFriendshipClient<$Result.GetResult<Prisma.$UserFriendshipPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserFriendships.
     *     @param {UserFriendshipCreateManyArgs} args - Arguments to create many UserFriendships.
     *     @example
     *     // Create many UserFriendships
     *     const userFriendship = await prisma.userFriendship.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserFriendshipCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFriendshipCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserFriendship.
     * @param {UserFriendshipDeleteArgs} args - Arguments to delete one UserFriendship.
     * @example
     * // Delete one UserFriendship
     * const UserFriendship = await prisma.userFriendship.delete({
     *   where: {
     *     // ... filter to delete one UserFriendship
     *   }
     * })
     * 
    **/
    delete<T extends UserFriendshipDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserFriendshipDeleteArgs<ExtArgs>>
    ): Prisma__UserFriendshipClient<$Result.GetResult<Prisma.$UserFriendshipPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserFriendship.
     * @param {UserFriendshipUpdateArgs} args - Arguments to update one UserFriendship.
     * @example
     * // Update one UserFriendship
     * const userFriendship = await prisma.userFriendship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserFriendshipUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserFriendshipUpdateArgs<ExtArgs>>
    ): Prisma__UserFriendshipClient<$Result.GetResult<Prisma.$UserFriendshipPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserFriendships.
     * @param {UserFriendshipDeleteManyArgs} args - Arguments to filter UserFriendships to delete.
     * @example
     * // Delete a few UserFriendships
     * const { count } = await prisma.userFriendship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserFriendshipDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFriendshipDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFriendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserFriendships
     * const userFriendship = await prisma.userFriendship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserFriendshipUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserFriendshipUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserFriendship.
     * @param {UserFriendshipUpsertArgs} args - Arguments to update or create a UserFriendship.
     * @example
     * // Update or create a UserFriendship
     * const userFriendship = await prisma.userFriendship.upsert({
     *   create: {
     *     // ... data to create a UserFriendship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserFriendship we want to update
     *   }
     * })
    **/
    upsert<T extends UserFriendshipUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserFriendshipUpsertArgs<ExtArgs>>
    ): Prisma__UserFriendshipClient<$Result.GetResult<Prisma.$UserFriendshipPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserFriendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendshipCountArgs} args - Arguments to filter UserFriendships to count.
     * @example
     * // Count the number of UserFriendships
     * const count = await prisma.userFriendship.count({
     *   where: {
     *     // ... the filter for the UserFriendships we want to count
     *   }
     * })
    **/
    count<T extends UserFriendshipCountArgs>(
      args?: Subset<T, UserFriendshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserFriendshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserFriendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserFriendshipAggregateArgs>(args: Subset<T, UserFriendshipAggregateArgs>): Prisma.PrismaPromise<GetUserFriendshipAggregateType<T>>

    /**
     * Group by UserFriendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserFriendshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserFriendshipGroupByArgs['orderBy'] }
        : { orderBy?: UserFriendshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserFriendshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFriendshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserFriendship model
   */
  readonly fields: UserFriendshipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserFriendship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserFriendshipClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    target<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserFriendship model
   */ 
  interface UserFriendshipFieldRefs {
    readonly id: FieldRef<"UserFriendship", 'Int'>
    readonly senderId: FieldRef<"UserFriendship", 'Int'>
    readonly targetId: FieldRef<"UserFriendship", 'Int'>
    readonly acceptedAt: FieldRef<"UserFriendship", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * UserFriendship findUnique
   */
  export type UserFriendshipFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFriendship
     */
    select?: UserFriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendshipInclude<ExtArgs> | null
    /**
     * Filter, which UserFriendship to fetch.
     */
    where: UserFriendshipWhereUniqueInput
  }


  /**
   * UserFriendship findUniqueOrThrow
   */
  export type UserFriendshipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFriendship
     */
    select?: UserFriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendshipInclude<ExtArgs> | null
    /**
     * Filter, which UserFriendship to fetch.
     */
    where: UserFriendshipWhereUniqueInput
  }


  /**
   * UserFriendship findFirst
   */
  export type UserFriendshipFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFriendship
     */
    select?: UserFriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendshipInclude<ExtArgs> | null
    /**
     * Filter, which UserFriendship to fetch.
     */
    where?: UserFriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFriendships to fetch.
     */
    orderBy?: UserFriendshipOrderByWithRelationInput | UserFriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFriendships.
     */
    cursor?: UserFriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFriendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFriendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFriendships.
     */
    distinct?: UserFriendshipScalarFieldEnum | UserFriendshipScalarFieldEnum[]
  }


  /**
   * UserFriendship findFirstOrThrow
   */
  export type UserFriendshipFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFriendship
     */
    select?: UserFriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendshipInclude<ExtArgs> | null
    /**
     * Filter, which UserFriendship to fetch.
     */
    where?: UserFriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFriendships to fetch.
     */
    orderBy?: UserFriendshipOrderByWithRelationInput | UserFriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFriendships.
     */
    cursor?: UserFriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFriendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFriendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFriendships.
     */
    distinct?: UserFriendshipScalarFieldEnum | UserFriendshipScalarFieldEnum[]
  }


  /**
   * UserFriendship findMany
   */
  export type UserFriendshipFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFriendship
     */
    select?: UserFriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendshipInclude<ExtArgs> | null
    /**
     * Filter, which UserFriendships to fetch.
     */
    where?: UserFriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFriendships to fetch.
     */
    orderBy?: UserFriendshipOrderByWithRelationInput | UserFriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserFriendships.
     */
    cursor?: UserFriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFriendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFriendships.
     */
    skip?: number
    distinct?: UserFriendshipScalarFieldEnum | UserFriendshipScalarFieldEnum[]
  }


  /**
   * UserFriendship create
   */
  export type UserFriendshipCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFriendship
     */
    select?: UserFriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendshipInclude<ExtArgs> | null
    /**
     * The data needed to create a UserFriendship.
     */
    data: XOR<UserFriendshipCreateInput, UserFriendshipUncheckedCreateInput>
  }


  /**
   * UserFriendship createMany
   */
  export type UserFriendshipCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserFriendships.
     */
    data: UserFriendshipCreateManyInput | UserFriendshipCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserFriendship update
   */
  export type UserFriendshipUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFriendship
     */
    select?: UserFriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendshipInclude<ExtArgs> | null
    /**
     * The data needed to update a UserFriendship.
     */
    data: XOR<UserFriendshipUpdateInput, UserFriendshipUncheckedUpdateInput>
    /**
     * Choose, which UserFriendship to update.
     */
    where: UserFriendshipWhereUniqueInput
  }


  /**
   * UserFriendship updateMany
   */
  export type UserFriendshipUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserFriendships.
     */
    data: XOR<UserFriendshipUpdateManyMutationInput, UserFriendshipUncheckedUpdateManyInput>
    /**
     * Filter which UserFriendships to update
     */
    where?: UserFriendshipWhereInput
  }


  /**
   * UserFriendship upsert
   */
  export type UserFriendshipUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFriendship
     */
    select?: UserFriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendshipInclude<ExtArgs> | null
    /**
     * The filter to search for the UserFriendship to update in case it exists.
     */
    where: UserFriendshipWhereUniqueInput
    /**
     * In case the UserFriendship found by the `where` argument doesn't exist, create a new UserFriendship with this data.
     */
    create: XOR<UserFriendshipCreateInput, UserFriendshipUncheckedCreateInput>
    /**
     * In case the UserFriendship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserFriendshipUpdateInput, UserFriendshipUncheckedUpdateInput>
  }


  /**
   * UserFriendship delete
   */
  export type UserFriendshipDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFriendship
     */
    select?: UserFriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendshipInclude<ExtArgs> | null
    /**
     * Filter which UserFriendship to delete.
     */
    where: UserFriendshipWhereUniqueInput
  }


  /**
   * UserFriendship deleteMany
   */
  export type UserFriendshipDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFriendships to delete
     */
    where?: UserFriendshipWhereInput
  }


  /**
   * UserFriendship without action
   */
  export type UserFriendshipDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFriendship
     */
    select?: UserFriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendshipInclude<ExtArgs> | null
  }



  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    id: number | null
  }

  export type MatchSumAggregateOutputType = {
    id: number | null
  }

  export type MatchMinAggregateOutputType = {
    id: number | null
  }

  export type MatchMaxAggregateOutputType = {
    id: number | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    id?: true
  }

  export type MatchSumAggregateInputType = {
    id?: true
  }

  export type MatchMinAggregateInputType = {
    id?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    id: number
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    users?: boolean | Match$usersArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectScalar = {
    id?: boolean
  }

  export type MatchInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | Match$usersArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MatchPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {
      users: Prisma.$UserMatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
    }, ExtArgs["result"]["match"]>
    composites: {}
  }


  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MatchFindManyArgs, 'select' | 'include'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MatchFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>
    ): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Match that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MatchFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>
    ): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MatchFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
    **/
    create<T extends MatchCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MatchCreateArgs<ExtArgs>>
    ): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Matches.
     *     @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     *     @example
     *     // Create many Matches
     *     const match = await prisma.match.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MatchCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
    **/
    delete<T extends MatchDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>
    ): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MatchUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>
    ): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MatchDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MatchUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
    **/
    upsert<T extends MatchUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>
    ): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Match$usersArgs<ExtArgs> = {}>(args?: Subset<T, Match$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Match model
   */ 
  interface MatchFieldRefs {
    readonly id: FieldRef<"Match", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data?: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }


  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
  }


  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }


  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
  }


  /**
   * Match.users
   */
  export type Match$usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
    where?: UserMatchWhereInput
    orderBy?: UserMatchOrderByWithRelationInput | UserMatchOrderByWithRelationInput[]
    cursor?: UserMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMatchScalarFieldEnum | UserMatchScalarFieldEnum[]
  }


  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchInclude<ExtArgs> | null
  }



  /**
   * Model UserMatch
   */

  export type AggregateUserMatch = {
    _count: UserMatchCountAggregateOutputType | null
    _avg: UserMatchAvgAggregateOutputType | null
    _sum: UserMatchSumAggregateOutputType | null
    _min: UserMatchMinAggregateOutputType | null
    _max: UserMatchMaxAggregateOutputType | null
  }

  export type UserMatchAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    matchId: number | null
    score: number | null
  }

  export type UserMatchSumAggregateOutputType = {
    id: number | null
    userId: number | null
    matchId: number | null
    score: number | null
  }

  export type UserMatchMinAggregateOutputType = {
    id: number | null
    userId: number | null
    matchId: number | null
    score: number | null
    isWin: boolean | null
  }

  export type UserMatchMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    matchId: number | null
    score: number | null
    isWin: boolean | null
  }

  export type UserMatchCountAggregateOutputType = {
    id: number
    userId: number
    matchId: number
    score: number
    isWin: number
    _all: number
  }


  export type UserMatchAvgAggregateInputType = {
    id?: true
    userId?: true
    matchId?: true
    score?: true
  }

  export type UserMatchSumAggregateInputType = {
    id?: true
    userId?: true
    matchId?: true
    score?: true
  }

  export type UserMatchMinAggregateInputType = {
    id?: true
    userId?: true
    matchId?: true
    score?: true
    isWin?: true
  }

  export type UserMatchMaxAggregateInputType = {
    id?: true
    userId?: true
    matchId?: true
    score?: true
    isWin?: true
  }

  export type UserMatchCountAggregateInputType = {
    id?: true
    userId?: true
    matchId?: true
    score?: true
    isWin?: true
    _all?: true
  }

  export type UserMatchAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMatch to aggregate.
     */
    where?: UserMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatches to fetch.
     */
    orderBy?: UserMatchOrderByWithRelationInput | UserMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserMatches
    **/
    _count?: true | UserMatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserMatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserMatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMatchMaxAggregateInputType
  }

  export type GetUserMatchAggregateType<T extends UserMatchAggregateArgs> = {
        [P in keyof T & keyof AggregateUserMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserMatch[P]>
      : GetScalarType<T[P], AggregateUserMatch[P]>
  }




  export type UserMatchGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserMatchWhereInput
    orderBy?: UserMatchOrderByWithAggregationInput | UserMatchOrderByWithAggregationInput[]
    by: UserMatchScalarFieldEnum[] | UserMatchScalarFieldEnum
    having?: UserMatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserMatchCountAggregateInputType | true
    _avg?: UserMatchAvgAggregateInputType
    _sum?: UserMatchSumAggregateInputType
    _min?: UserMatchMinAggregateInputType
    _max?: UserMatchMaxAggregateInputType
  }

  export type UserMatchGroupByOutputType = {
    id: number
    userId: number
    matchId: number
    score: number
    isWin: boolean
    _count: UserMatchCountAggregateOutputType | null
    _avg: UserMatchAvgAggregateOutputType | null
    _sum: UserMatchSumAggregateOutputType | null
    _min: UserMatchMinAggregateOutputType | null
    _max: UserMatchMaxAggregateOutputType | null
  }

  type GetUserMatchGroupByPayload<T extends UserMatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserMatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserMatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserMatchGroupByOutputType[P]>
            : GetScalarType<T[P], UserMatchGroupByOutputType[P]>
        }
      >
    >


  export type UserMatchSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    matchId?: boolean
    score?: boolean
    isWin?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    match?: boolean | MatchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMatch"]>

  export type UserMatchSelectScalar = {
    id?: boolean
    userId?: boolean
    matchId?: boolean
    score?: boolean
    isWin?: boolean
  }

  export type UserMatchInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    match?: boolean | MatchDefaultArgs<ExtArgs>
  }


  export type $UserMatchPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "UserMatch"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      match: Prisma.$MatchPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      userId: number
      matchId: number
      score: number
      isWin: boolean
    }, ExtArgs["result"]["userMatch"]>
    composites: {}
  }


  type UserMatchGetPayload<S extends boolean | null | undefined | UserMatchDefaultArgs> = $Result.GetResult<Prisma.$UserMatchPayload, S>

  type UserMatchCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserMatchFindManyArgs, 'select' | 'include'> & {
      select?: UserMatchCountAggregateInputType | true
    }

  export interface UserMatchDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserMatch'], meta: { name: 'UserMatch' } }
    /**
     * Find zero or one UserMatch that matches the filter.
     * @param {UserMatchFindUniqueArgs} args - Arguments to find a UserMatch
     * @example
     * // Get one UserMatch
     * const userMatch = await prisma.userMatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserMatchFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserMatchFindUniqueArgs<ExtArgs>>
    ): Prisma__UserMatchClient<$Result.GetResult<Prisma.$UserMatchPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserMatch that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserMatchFindUniqueOrThrowArgs} args - Arguments to find a UserMatch
     * @example
     * // Get one UserMatch
     * const userMatch = await prisma.userMatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserMatchFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMatchFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserMatchClient<$Result.GetResult<Prisma.$UserMatchPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserMatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchFindFirstArgs} args - Arguments to find a UserMatch
     * @example
     * // Get one UserMatch
     * const userMatch = await prisma.userMatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserMatchFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMatchFindFirstArgs<ExtArgs>>
    ): Prisma__UserMatchClient<$Result.GetResult<Prisma.$UserMatchPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserMatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchFindFirstOrThrowArgs} args - Arguments to find a UserMatch
     * @example
     * // Get one UserMatch
     * const userMatch = await prisma.userMatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserMatchFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMatchFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserMatchClient<$Result.GetResult<Prisma.$UserMatchPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserMatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserMatches
     * const userMatches = await prisma.userMatch.findMany()
     * 
     * // Get first 10 UserMatches
     * const userMatches = await prisma.userMatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userMatchWithIdOnly = await prisma.userMatch.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserMatchFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMatchFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserMatch.
     * @param {UserMatchCreateArgs} args - Arguments to create a UserMatch.
     * @example
     * // Create one UserMatch
     * const UserMatch = await prisma.userMatch.create({
     *   data: {
     *     // ... data to create a UserMatch
     *   }
     * })
     * 
    **/
    create<T extends UserMatchCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserMatchCreateArgs<ExtArgs>>
    ): Prisma__UserMatchClient<$Result.GetResult<Prisma.$UserMatchPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserMatches.
     *     @param {UserMatchCreateManyArgs} args - Arguments to create many UserMatches.
     *     @example
     *     // Create many UserMatches
     *     const userMatch = await prisma.userMatch.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserMatchCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMatchCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserMatch.
     * @param {UserMatchDeleteArgs} args - Arguments to delete one UserMatch.
     * @example
     * // Delete one UserMatch
     * const UserMatch = await prisma.userMatch.delete({
     *   where: {
     *     // ... filter to delete one UserMatch
     *   }
     * })
     * 
    **/
    delete<T extends UserMatchDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserMatchDeleteArgs<ExtArgs>>
    ): Prisma__UserMatchClient<$Result.GetResult<Prisma.$UserMatchPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserMatch.
     * @param {UserMatchUpdateArgs} args - Arguments to update one UserMatch.
     * @example
     * // Update one UserMatch
     * const userMatch = await prisma.userMatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserMatchUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserMatchUpdateArgs<ExtArgs>>
    ): Prisma__UserMatchClient<$Result.GetResult<Prisma.$UserMatchPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserMatches.
     * @param {UserMatchDeleteManyArgs} args - Arguments to filter UserMatches to delete.
     * @example
     * // Delete a few UserMatches
     * const { count } = await prisma.userMatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserMatchDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMatchDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserMatches
     * const userMatch = await prisma.userMatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserMatchUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserMatchUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserMatch.
     * @param {UserMatchUpsertArgs} args - Arguments to update or create a UserMatch.
     * @example
     * // Update or create a UserMatch
     * const userMatch = await prisma.userMatch.upsert({
     *   create: {
     *     // ... data to create a UserMatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserMatch we want to update
     *   }
     * })
    **/
    upsert<T extends UserMatchUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserMatchUpsertArgs<ExtArgs>>
    ): Prisma__UserMatchClient<$Result.GetResult<Prisma.$UserMatchPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchCountArgs} args - Arguments to filter UserMatches to count.
     * @example
     * // Count the number of UserMatches
     * const count = await prisma.userMatch.count({
     *   where: {
     *     // ... the filter for the UserMatches we want to count
     *   }
     * })
    **/
    count<T extends UserMatchCountArgs>(
      args?: Subset<T, UserMatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserMatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserMatchAggregateArgs>(args: Subset<T, UserMatchAggregateArgs>): Prisma.PrismaPromise<GetUserMatchAggregateType<T>>

    /**
     * Group by UserMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserMatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserMatchGroupByArgs['orderBy'] }
        : { orderBy?: UserMatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserMatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserMatch model
   */
  readonly fields: UserMatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserMatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserMatchClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    match<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserMatch model
   */ 
  interface UserMatchFieldRefs {
    readonly id: FieldRef<"UserMatch", 'Int'>
    readonly userId: FieldRef<"UserMatch", 'Int'>
    readonly matchId: FieldRef<"UserMatch", 'Int'>
    readonly score: FieldRef<"UserMatch", 'Int'>
    readonly isWin: FieldRef<"UserMatch", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * UserMatch findUnique
   */
  export type UserMatchFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
    /**
     * Filter, which UserMatch to fetch.
     */
    where: UserMatchWhereUniqueInput
  }


  /**
   * UserMatch findUniqueOrThrow
   */
  export type UserMatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
    /**
     * Filter, which UserMatch to fetch.
     */
    where: UserMatchWhereUniqueInput
  }


  /**
   * UserMatch findFirst
   */
  export type UserMatchFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
    /**
     * Filter, which UserMatch to fetch.
     */
    where?: UserMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatches to fetch.
     */
    orderBy?: UserMatchOrderByWithRelationInput | UserMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMatches.
     */
    cursor?: UserMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMatches.
     */
    distinct?: UserMatchScalarFieldEnum | UserMatchScalarFieldEnum[]
  }


  /**
   * UserMatch findFirstOrThrow
   */
  export type UserMatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
    /**
     * Filter, which UserMatch to fetch.
     */
    where?: UserMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatches to fetch.
     */
    orderBy?: UserMatchOrderByWithRelationInput | UserMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMatches.
     */
    cursor?: UserMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMatches.
     */
    distinct?: UserMatchScalarFieldEnum | UserMatchScalarFieldEnum[]
  }


  /**
   * UserMatch findMany
   */
  export type UserMatchFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
    /**
     * Filter, which UserMatches to fetch.
     */
    where?: UserMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatches to fetch.
     */
    orderBy?: UserMatchOrderByWithRelationInput | UserMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserMatches.
     */
    cursor?: UserMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatches.
     */
    skip?: number
    distinct?: UserMatchScalarFieldEnum | UserMatchScalarFieldEnum[]
  }


  /**
   * UserMatch create
   */
  export type UserMatchCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
    /**
     * The data needed to create a UserMatch.
     */
    data: XOR<UserMatchCreateInput, UserMatchUncheckedCreateInput>
  }


  /**
   * UserMatch createMany
   */
  export type UserMatchCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserMatches.
     */
    data: UserMatchCreateManyInput | UserMatchCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserMatch update
   */
  export type UserMatchUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
    /**
     * The data needed to update a UserMatch.
     */
    data: XOR<UserMatchUpdateInput, UserMatchUncheckedUpdateInput>
    /**
     * Choose, which UserMatch to update.
     */
    where: UserMatchWhereUniqueInput
  }


  /**
   * UserMatch updateMany
   */
  export type UserMatchUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserMatches.
     */
    data: XOR<UserMatchUpdateManyMutationInput, UserMatchUncheckedUpdateManyInput>
    /**
     * Filter which UserMatches to update
     */
    where?: UserMatchWhereInput
  }


  /**
   * UserMatch upsert
   */
  export type UserMatchUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
    /**
     * The filter to search for the UserMatch to update in case it exists.
     */
    where: UserMatchWhereUniqueInput
    /**
     * In case the UserMatch found by the `where` argument doesn't exist, create a new UserMatch with this data.
     */
    create: XOR<UserMatchCreateInput, UserMatchUncheckedCreateInput>
    /**
     * In case the UserMatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserMatchUpdateInput, UserMatchUncheckedUpdateInput>
  }


  /**
   * UserMatch delete
   */
  export type UserMatchDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
    /**
     * Filter which UserMatch to delete.
     */
    where: UserMatchWhereUniqueInput
  }


  /**
   * UserMatch deleteMany
   */
  export type UserMatchDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMatches to delete
     */
    where?: UserMatchWhereInput
  }


  /**
   * UserMatch without action
   */
  export type UserMatchDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatch
     */
    select?: UserMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserMatchInclude<ExtArgs> | null
  }



  /**
   * Model Block
   */

  export type AggregateBlock = {
    _count: BlockCountAggregateOutputType | null
    _avg: BlockAvgAggregateOutputType | null
    _sum: BlockSumAggregateOutputType | null
    _min: BlockMinAggregateOutputType | null
    _max: BlockMaxAggregateOutputType | null
  }

  export type BlockAvgAggregateOutputType = {
    id: number | null
    blockerId: number | null
    blockedId: number | null
  }

  export type BlockSumAggregateOutputType = {
    id: number | null
    blockerId: number | null
    blockedId: number | null
  }

  export type BlockMinAggregateOutputType = {
    id: number | null
    blockerId: number | null
    blockedId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BlockMaxAggregateOutputType = {
    id: number | null
    blockerId: number | null
    blockedId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BlockCountAggregateOutputType = {
    id: number
    blockerId: number
    blockedId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BlockAvgAggregateInputType = {
    id?: true
    blockerId?: true
    blockedId?: true
  }

  export type BlockSumAggregateInputType = {
    id?: true
    blockerId?: true
    blockedId?: true
  }

  export type BlockMinAggregateInputType = {
    id?: true
    blockerId?: true
    blockedId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BlockMaxAggregateInputType = {
    id?: true
    blockerId?: true
    blockedId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BlockCountAggregateInputType = {
    id?: true
    blockerId?: true
    blockedId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BlockAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Block to aggregate.
     */
    where?: BlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blocks to fetch.
     */
    orderBy?: BlockOrderByWithRelationInput | BlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Blocks
    **/
    _count?: true | BlockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlockMaxAggregateInputType
  }

  export type GetBlockAggregateType<T extends BlockAggregateArgs> = {
        [P in keyof T & keyof AggregateBlock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlock[P]>
      : GetScalarType<T[P], AggregateBlock[P]>
  }




  export type BlockGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BlockWhereInput
    orderBy?: BlockOrderByWithAggregationInput | BlockOrderByWithAggregationInput[]
    by: BlockScalarFieldEnum[] | BlockScalarFieldEnum
    having?: BlockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlockCountAggregateInputType | true
    _avg?: BlockAvgAggregateInputType
    _sum?: BlockSumAggregateInputType
    _min?: BlockMinAggregateInputType
    _max?: BlockMaxAggregateInputType
  }

  export type BlockGroupByOutputType = {
    id: number
    blockerId: number
    blockedId: number
    createdAt: Date
    updatedAt: Date | null
    _count: BlockCountAggregateOutputType | null
    _avg: BlockAvgAggregateOutputType | null
    _sum: BlockSumAggregateOutputType | null
    _min: BlockMinAggregateOutputType | null
    _max: BlockMaxAggregateOutputType | null
  }

  type GetBlockGroupByPayload<T extends BlockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlockGroupByOutputType[P]>
            : GetScalarType<T[P], BlockGroupByOutputType[P]>
        }
      >
    >


  export type BlockSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    blockerId?: boolean
    blockedId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    blockedBy?: boolean | UserDefaultArgs<ExtArgs>
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["block"]>

  export type BlockSelectScalar = {
    id?: boolean
    blockerId?: boolean
    blockedId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BlockInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    blockedBy?: boolean | UserDefaultArgs<ExtArgs>
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $BlockPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Block"
    objects: {
      blockedBy: Prisma.$UserPayload<ExtArgs>
      receivedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      blockerId: number
      blockedId: number
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["block"]>
    composites: {}
  }


  type BlockGetPayload<S extends boolean | null | undefined | BlockDefaultArgs> = $Result.GetResult<Prisma.$BlockPayload, S>

  type BlockCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<BlockFindManyArgs, 'select' | 'include'> & {
      select?: BlockCountAggregateInputType | true
    }

  export interface BlockDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Block'], meta: { name: 'Block' } }
    /**
     * Find zero or one Block that matches the filter.
     * @param {BlockFindUniqueArgs} args - Arguments to find a Block
     * @example
     * // Get one Block
     * const block = await prisma.block.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlockFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BlockFindUniqueArgs<ExtArgs>>
    ): Prisma__BlockClient<$Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Block that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlockFindUniqueOrThrowArgs} args - Arguments to find a Block
     * @example
     * // Get one Block
     * const block = await prisma.block.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlockFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BlockClient<$Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Block that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockFindFirstArgs} args - Arguments to find a Block
     * @example
     * // Get one Block
     * const block = await prisma.block.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlockFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockFindFirstArgs<ExtArgs>>
    ): Prisma__BlockClient<$Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Block that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockFindFirstOrThrowArgs} args - Arguments to find a Block
     * @example
     * // Get one Block
     * const block = await prisma.block.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlockFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BlockClient<$Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Blocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Blocks
     * const blocks = await prisma.block.findMany()
     * 
     * // Get first 10 Blocks
     * const blocks = await prisma.block.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blockWithIdOnly = await prisma.block.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlockFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Block.
     * @param {BlockCreateArgs} args - Arguments to create a Block.
     * @example
     * // Create one Block
     * const Block = await prisma.block.create({
     *   data: {
     *     // ... data to create a Block
     *   }
     * })
     * 
    **/
    create<T extends BlockCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BlockCreateArgs<ExtArgs>>
    ): Prisma__BlockClient<$Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Blocks.
     *     @param {BlockCreateManyArgs} args - Arguments to create many Blocks.
     *     @example
     *     // Create many Blocks
     *     const block = await prisma.block.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlockCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Block.
     * @param {BlockDeleteArgs} args - Arguments to delete one Block.
     * @example
     * // Delete one Block
     * const Block = await prisma.block.delete({
     *   where: {
     *     // ... filter to delete one Block
     *   }
     * })
     * 
    **/
    delete<T extends BlockDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BlockDeleteArgs<ExtArgs>>
    ): Prisma__BlockClient<$Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Block.
     * @param {BlockUpdateArgs} args - Arguments to update one Block.
     * @example
     * // Update one Block
     * const block = await prisma.block.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlockUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BlockUpdateArgs<ExtArgs>>
    ): Prisma__BlockClient<$Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Blocks.
     * @param {BlockDeleteManyArgs} args - Arguments to filter Blocks to delete.
     * @example
     * // Delete a few Blocks
     * const { count } = await prisma.block.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlockDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Blocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Blocks
     * const block = await prisma.block.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlockUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BlockUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Block.
     * @param {BlockUpsertArgs} args - Arguments to update or create a Block.
     * @example
     * // Update or create a Block
     * const block = await prisma.block.upsert({
     *   create: {
     *     // ... data to create a Block
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Block we want to update
     *   }
     * })
    **/
    upsert<T extends BlockUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BlockUpsertArgs<ExtArgs>>
    ): Prisma__BlockClient<$Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Blocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockCountArgs} args - Arguments to filter Blocks to count.
     * @example
     * // Count the number of Blocks
     * const count = await prisma.block.count({
     *   where: {
     *     // ... the filter for the Blocks we want to count
     *   }
     * })
    **/
    count<T extends BlockCountArgs>(
      args?: Subset<T, BlockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Block.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlockAggregateArgs>(args: Subset<T, BlockAggregateArgs>): Prisma.PrismaPromise<GetBlockAggregateType<T>>

    /**
     * Group by Block.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlockGroupByArgs['orderBy'] }
        : { orderBy?: BlockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Block model
   */
  readonly fields: BlockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Block.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlockClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    blockedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    receivedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Block model
   */ 
  interface BlockFieldRefs {
    readonly id: FieldRef<"Block", 'Int'>
    readonly blockerId: FieldRef<"Block", 'Int'>
    readonly blockedId: FieldRef<"Block", 'Int'>
    readonly createdAt: FieldRef<"Block", 'DateTime'>
    readonly updatedAt: FieldRef<"Block", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Block findUnique
   */
  export type BlockFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
    /**
     * Filter, which Block to fetch.
     */
    where: BlockWhereUniqueInput
  }


  /**
   * Block findUniqueOrThrow
   */
  export type BlockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
    /**
     * Filter, which Block to fetch.
     */
    where: BlockWhereUniqueInput
  }


  /**
   * Block findFirst
   */
  export type BlockFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
    /**
     * Filter, which Block to fetch.
     */
    where?: BlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blocks to fetch.
     */
    orderBy?: BlockOrderByWithRelationInput | BlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blocks.
     */
    cursor?: BlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blocks.
     */
    distinct?: BlockScalarFieldEnum | BlockScalarFieldEnum[]
  }


  /**
   * Block findFirstOrThrow
   */
  export type BlockFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
    /**
     * Filter, which Block to fetch.
     */
    where?: BlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blocks to fetch.
     */
    orderBy?: BlockOrderByWithRelationInput | BlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blocks.
     */
    cursor?: BlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blocks.
     */
    distinct?: BlockScalarFieldEnum | BlockScalarFieldEnum[]
  }


  /**
   * Block findMany
   */
  export type BlockFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
    /**
     * Filter, which Blocks to fetch.
     */
    where?: BlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blocks to fetch.
     */
    orderBy?: BlockOrderByWithRelationInput | BlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Blocks.
     */
    cursor?: BlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blocks.
     */
    skip?: number
    distinct?: BlockScalarFieldEnum | BlockScalarFieldEnum[]
  }


  /**
   * Block create
   */
  export type BlockCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
    /**
     * The data needed to create a Block.
     */
    data: XOR<BlockCreateInput, BlockUncheckedCreateInput>
  }


  /**
   * Block createMany
   */
  export type BlockCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Blocks.
     */
    data: BlockCreateManyInput | BlockCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Block update
   */
  export type BlockUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
    /**
     * The data needed to update a Block.
     */
    data: XOR<BlockUpdateInput, BlockUncheckedUpdateInput>
    /**
     * Choose, which Block to update.
     */
    where: BlockWhereUniqueInput
  }


  /**
   * Block updateMany
   */
  export type BlockUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Blocks.
     */
    data: XOR<BlockUpdateManyMutationInput, BlockUncheckedUpdateManyInput>
    /**
     * Filter which Blocks to update
     */
    where?: BlockWhereInput
  }


  /**
   * Block upsert
   */
  export type BlockUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
    /**
     * The filter to search for the Block to update in case it exists.
     */
    where: BlockWhereUniqueInput
    /**
     * In case the Block found by the `where` argument doesn't exist, create a new Block with this data.
     */
    create: XOR<BlockCreateInput, BlockUncheckedCreateInput>
    /**
     * In case the Block was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlockUpdateInput, BlockUncheckedUpdateInput>
  }


  /**
   * Block delete
   */
  export type BlockDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
    /**
     * Filter which Block to delete.
     */
    where: BlockWhereUniqueInput
  }


  /**
   * Block deleteMany
   */
  export type BlockDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Blocks to delete
     */
    where?: BlockWhereInput
  }


  /**
   * Block without action
   */
  export type BlockDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Block
     */
    select?: BlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockInclude<ExtArgs> | null
  }



  /**
   * Model Channel
   */

  export type AggregateChannel = {
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  export type ChannelAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
  }

  export type ChannelSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
  }

  export type ChannelMinAggregateOutputType = {
    id: number | null
    conv: boolean | null
    name: string | null
    password: string | null
    creatorId: number | null
    created_at: Date | null
  }

  export type ChannelMaxAggregateOutputType = {
    id: number | null
    conv: boolean | null
    name: string | null
    password: string | null
    creatorId: number | null
    created_at: Date | null
  }

  export type ChannelCountAggregateOutputType = {
    id: number
    conv: number
    name: number
    password: number
    creatorId: number
    created_at: number
    _all: number
  }


  export type ChannelAvgAggregateInputType = {
    id?: true
    creatorId?: true
  }

  export type ChannelSumAggregateInputType = {
    id?: true
    creatorId?: true
  }

  export type ChannelMinAggregateInputType = {
    id?: true
    conv?: true
    name?: true
    password?: true
    creatorId?: true
    created_at?: true
  }

  export type ChannelMaxAggregateInputType = {
    id?: true
    conv?: true
    name?: true
    password?: true
    creatorId?: true
    created_at?: true
  }

  export type ChannelCountAggregateInputType = {
    id?: true
    conv?: true
    name?: true
    password?: true
    creatorId?: true
    created_at?: true
    _all?: true
  }

  export type ChannelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channel to aggregate.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Channels
    **/
    _count?: true | ChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelMaxAggregateInputType
  }

  export type GetChannelAggregateType<T extends ChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannel[P]>
      : GetScalarType<T[P], AggregateChannel[P]>
  }




  export type ChannelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelWhereInput
    orderBy?: ChannelOrderByWithAggregationInput | ChannelOrderByWithAggregationInput[]
    by: ChannelScalarFieldEnum[] | ChannelScalarFieldEnum
    having?: ChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelCountAggregateInputType | true
    _avg?: ChannelAvgAggregateInputType
    _sum?: ChannelSumAggregateInputType
    _min?: ChannelMinAggregateInputType
    _max?: ChannelMaxAggregateInputType
  }

  export type ChannelGroupByOutputType = {
    id: number
    conv: boolean
    name: string | null
    password: string | null
    creatorId: number | null
    created_at: Date
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  type GetChannelGroupByPayload<T extends ChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelGroupByOutputType[P]>
        }
      >
    >


  export type ChannelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conv?: boolean
    name?: boolean
    password?: boolean
    creatorId?: boolean
    created_at?: boolean
    creator?: boolean | Channel$creatorArgs<ExtArgs>
    users?: boolean | Channel$usersArgs<ExtArgs>
    messages?: boolean | Channel$messagesArgs<ExtArgs>
    _count?: boolean | ChannelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["channel"]>

  export type ChannelSelectScalar = {
    id?: boolean
    conv?: boolean
    name?: boolean
    password?: boolean
    creatorId?: boolean
    created_at?: boolean
  }

  export type ChannelInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    creator?: boolean | Channel$creatorArgs<ExtArgs>
    users?: boolean | Channel$usersArgs<ExtArgs>
    messages?: boolean | Channel$messagesArgs<ExtArgs>
    _count?: boolean | ChannelCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ChannelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Channel"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs> | null
      users: Prisma.$UserChannelPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      conv: boolean
      name: string | null
      password: string | null
      creatorId: number | null
      created_at: Date
    }, ExtArgs["result"]["channel"]>
    composites: {}
  }


  type ChannelGetPayload<S extends boolean | null | undefined | ChannelDefaultArgs> = $Result.GetResult<Prisma.$ChannelPayload, S>

  type ChannelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChannelFindManyArgs, 'select' | 'include'> & {
      select?: ChannelCountAggregateInputType | true
    }

  export interface ChannelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Channel'], meta: { name: 'Channel' } }
    /**
     * Find zero or one Channel that matches the filter.
     * @param {ChannelFindUniqueArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelFindUniqueArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Channel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelFindUniqueOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Channel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindFirstArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Channel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channel.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelWithIdOnly = await prisma.channel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Channel.
     * @param {ChannelCreateArgs} args - Arguments to create a Channel.
     * @example
     * // Create one Channel
     * const Channel = await prisma.channel.create({
     *   data: {
     *     // ... data to create a Channel
     *   }
     * })
     * 
    **/
    create<T extends ChannelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelCreateArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Channels.
     *     @param {ChannelCreateManyArgs} args - Arguments to create many Channels.
     *     @example
     *     // Create many Channels
     *     const channel = await prisma.channel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channel.
     * @param {ChannelDeleteArgs} args - Arguments to delete one Channel.
     * @example
     * // Delete one Channel
     * const Channel = await prisma.channel.delete({
     *   where: {
     *     // ... filter to delete one Channel
     *   }
     * })
     * 
    **/
    delete<T extends ChannelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelDeleteArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Channel.
     * @param {ChannelUpdateArgs} args - Arguments to update one Channel.
     * @example
     * // Update one Channel
     * const channel = await prisma.channel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpdateArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Channels.
     * @param {ChannelDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channel = await prisma.channel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channel.
     * @param {ChannelUpsertArgs} args - Arguments to update or create a Channel.
     * @example
     * // Update or create a Channel
     * const channel = await prisma.channel.upsert({
     *   create: {
     *     // ... data to create a Channel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channel we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpsertArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channel.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends ChannelCountArgs>(
      args?: Subset<T, ChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelAggregateArgs>(args: Subset<T, ChannelAggregateArgs>): Prisma.PrismaPromise<GetChannelAggregateType<T>>

    /**
     * Group by Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelGroupByArgs['orderBy'] }
        : { orderBy?: ChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Channel model
   */
  readonly fields: ChannelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Channel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChannelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    creator<T extends Channel$creatorArgs<ExtArgs> = {}>(args?: Subset<T, Channel$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    users<T extends Channel$usersArgs<ExtArgs> = {}>(args?: Subset<T, Channel$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserChannelPayload<ExtArgs>, T, 'findMany'> | Null>;

    messages<T extends Channel$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Channel$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Channel model
   */ 
  interface ChannelFieldRefs {
    readonly id: FieldRef<"Channel", 'Int'>
    readonly conv: FieldRef<"Channel", 'Boolean'>
    readonly name: FieldRef<"Channel", 'String'>
    readonly password: FieldRef<"Channel", 'String'>
    readonly creatorId: FieldRef<"Channel", 'Int'>
    readonly created_at: FieldRef<"Channel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Channel findUnique
   */
  export type ChannelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel findUniqueOrThrow
   */
  export type ChannelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel findFirst
   */
  export type ChannelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel findFirstOrThrow
   */
  export type ChannelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel findMany
   */
  export type ChannelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel create
   */
  export type ChannelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The data needed to create a Channel.
     */
    data: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
  }


  /**
   * Channel createMany
   */
  export type ChannelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Channels.
     */
    data: ChannelCreateManyInput | ChannelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Channel update
   */
  export type ChannelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The data needed to update a Channel.
     */
    data: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
    /**
     * Choose, which Channel to update.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel updateMany
   */
  export type ChannelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Channels.
     */
    data: XOR<ChannelUpdateManyMutationInput, ChannelUncheckedUpdateManyInput>
    /**
     * Filter which Channels to update
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel upsert
   */
  export type ChannelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The filter to search for the Channel to update in case it exists.
     */
    where: ChannelWhereUniqueInput
    /**
     * In case the Channel found by the `where` argument doesn't exist, create a new Channel with this data.
     */
    create: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
    /**
     * In case the Channel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
  }


  /**
   * Channel delete
   */
  export type ChannelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter which Channel to delete.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel deleteMany
   */
  export type ChannelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channels to delete
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel.creator
   */
  export type Channel$creatorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Channel.users
   */
  export type Channel$usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
    where?: UserChannelWhereInput
    orderBy?: UserChannelOrderByWithRelationInput | UserChannelOrderByWithRelationInput[]
    cursor?: UserChannelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserChannelScalarFieldEnum | UserChannelScalarFieldEnum[]
  }


  /**
   * Channel.messages
   */
  export type Channel$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Channel without action
   */
  export type ChannelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
  }



  /**
   * Model UserChannel
   */

  export type AggregateUserChannel = {
    _count: UserChannelCountAggregateOutputType | null
    _avg: UserChannelAvgAggregateOutputType | null
    _sum: UserChannelSumAggregateOutputType | null
    _min: UserChannelMinAggregateOutputType | null
    _max: UserChannelMaxAggregateOutputType | null
  }

  export type UserChannelAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    lastRead: number | null
  }

  export type UserChannelSumAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    lastRead: number | null
  }

  export type UserChannelMinAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    lastRead: number | null
    isBlocked: boolean | null
  }

  export type UserChannelMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    lastRead: number | null
    isBlocked: boolean | null
  }

  export type UserChannelCountAggregateOutputType = {
    id: number
    userId: number
    channelId: number
    lastRead: number
    isBlocked: number
    _all: number
  }


  export type UserChannelAvgAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    lastRead?: true
  }

  export type UserChannelSumAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    lastRead?: true
  }

  export type UserChannelMinAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    lastRead?: true
    isBlocked?: true
  }

  export type UserChannelMaxAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    lastRead?: true
    isBlocked?: true
  }

  export type UserChannelCountAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    lastRead?: true
    isBlocked?: true
    _all?: true
  }

  export type UserChannelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserChannel to aggregate.
     */
    where?: UserChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserChannels to fetch.
     */
    orderBy?: UserChannelOrderByWithRelationInput | UserChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserChannels
    **/
    _count?: true | UserChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserChannelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserChannelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserChannelMaxAggregateInputType
  }

  export type GetUserChannelAggregateType<T extends UserChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateUserChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserChannel[P]>
      : GetScalarType<T[P], AggregateUserChannel[P]>
  }




  export type UserChannelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserChannelWhereInput
    orderBy?: UserChannelOrderByWithAggregationInput | UserChannelOrderByWithAggregationInput[]
    by: UserChannelScalarFieldEnum[] | UserChannelScalarFieldEnum
    having?: UserChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserChannelCountAggregateInputType | true
    _avg?: UserChannelAvgAggregateInputType
    _sum?: UserChannelSumAggregateInputType
    _min?: UserChannelMinAggregateInputType
    _max?: UserChannelMaxAggregateInputType
  }

  export type UserChannelGroupByOutputType = {
    id: number
    userId: number
    channelId: number
    lastRead: number
    isBlocked: boolean
    _count: UserChannelCountAggregateOutputType | null
    _avg: UserChannelAvgAggregateOutputType | null
    _sum: UserChannelSumAggregateOutputType | null
    _min: UserChannelMinAggregateOutputType | null
    _max: UserChannelMaxAggregateOutputType | null
  }

  type GetUserChannelGroupByPayload<T extends UserChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserChannelGroupByOutputType[P]>
            : GetScalarType<T[P], UserChannelGroupByOutputType[P]>
        }
      >
    >


  export type UserChannelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    channelId?: boolean
    lastRead?: boolean
    isBlocked?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userChannel"]>

  export type UserChannelSelectScalar = {
    id?: boolean
    userId?: boolean
    channelId?: boolean
    lastRead?: boolean
    isBlocked?: boolean
  }

  export type UserChannelInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
  }


  export type $UserChannelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "UserChannel"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      channel: Prisma.$ChannelPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      userId: number
      channelId: number
      lastRead: number
      isBlocked: boolean
    }, ExtArgs["result"]["userChannel"]>
    composites: {}
  }


  type UserChannelGetPayload<S extends boolean | null | undefined | UserChannelDefaultArgs> = $Result.GetResult<Prisma.$UserChannelPayload, S>

  type UserChannelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserChannelFindManyArgs, 'select' | 'include'> & {
      select?: UserChannelCountAggregateInputType | true
    }

  export interface UserChannelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserChannel'], meta: { name: 'UserChannel' } }
    /**
     * Find zero or one UserChannel that matches the filter.
     * @param {UserChannelFindUniqueArgs} args - Arguments to find a UserChannel
     * @example
     * // Get one UserChannel
     * const userChannel = await prisma.userChannel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserChannelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserChannelFindUniqueArgs<ExtArgs>>
    ): Prisma__UserChannelClient<$Result.GetResult<Prisma.$UserChannelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserChannel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserChannelFindUniqueOrThrowArgs} args - Arguments to find a UserChannel
     * @example
     * // Get one UserChannel
     * const userChannel = await prisma.userChannel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserChannelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserChannelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserChannelClient<$Result.GetResult<Prisma.$UserChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserChannel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChannelFindFirstArgs} args - Arguments to find a UserChannel
     * @example
     * // Get one UserChannel
     * const userChannel = await prisma.userChannel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserChannelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserChannelFindFirstArgs<ExtArgs>>
    ): Prisma__UserChannelClient<$Result.GetResult<Prisma.$UserChannelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserChannel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChannelFindFirstOrThrowArgs} args - Arguments to find a UserChannel
     * @example
     * // Get one UserChannel
     * const userChannel = await prisma.userChannel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserChannelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserChannelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserChannelClient<$Result.GetResult<Prisma.$UserChannelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserChannels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChannelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserChannels
     * const userChannels = await prisma.userChannel.findMany()
     * 
     * // Get first 10 UserChannels
     * const userChannels = await prisma.userChannel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userChannelWithIdOnly = await prisma.userChannel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserChannelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserChannelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserChannelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserChannel.
     * @param {UserChannelCreateArgs} args - Arguments to create a UserChannel.
     * @example
     * // Create one UserChannel
     * const UserChannel = await prisma.userChannel.create({
     *   data: {
     *     // ... data to create a UserChannel
     *   }
     * })
     * 
    **/
    create<T extends UserChannelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserChannelCreateArgs<ExtArgs>>
    ): Prisma__UserChannelClient<$Result.GetResult<Prisma.$UserChannelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserChannels.
     *     @param {UserChannelCreateManyArgs} args - Arguments to create many UserChannels.
     *     @example
     *     // Create many UserChannels
     *     const userChannel = await prisma.userChannel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserChannelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserChannelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserChannel.
     * @param {UserChannelDeleteArgs} args - Arguments to delete one UserChannel.
     * @example
     * // Delete one UserChannel
     * const UserChannel = await prisma.userChannel.delete({
     *   where: {
     *     // ... filter to delete one UserChannel
     *   }
     * })
     * 
    **/
    delete<T extends UserChannelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserChannelDeleteArgs<ExtArgs>>
    ): Prisma__UserChannelClient<$Result.GetResult<Prisma.$UserChannelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserChannel.
     * @param {UserChannelUpdateArgs} args - Arguments to update one UserChannel.
     * @example
     * // Update one UserChannel
     * const userChannel = await prisma.userChannel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserChannelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserChannelUpdateArgs<ExtArgs>>
    ): Prisma__UserChannelClient<$Result.GetResult<Prisma.$UserChannelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserChannels.
     * @param {UserChannelDeleteManyArgs} args - Arguments to filter UserChannels to delete.
     * @example
     * // Delete a few UserChannels
     * const { count } = await prisma.userChannel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserChannelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserChannelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserChannels
     * const userChannel = await prisma.userChannel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserChannelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserChannelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserChannel.
     * @param {UserChannelUpsertArgs} args - Arguments to update or create a UserChannel.
     * @example
     * // Update or create a UserChannel
     * const userChannel = await prisma.userChannel.upsert({
     *   create: {
     *     // ... data to create a UserChannel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserChannel we want to update
     *   }
     * })
    **/
    upsert<T extends UserChannelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserChannelUpsertArgs<ExtArgs>>
    ): Prisma__UserChannelClient<$Result.GetResult<Prisma.$UserChannelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChannelCountArgs} args - Arguments to filter UserChannels to count.
     * @example
     * // Count the number of UserChannels
     * const count = await prisma.userChannel.count({
     *   where: {
     *     // ... the filter for the UserChannels we want to count
     *   }
     * })
    **/
    count<T extends UserChannelCountArgs>(
      args?: Subset<T, UserChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserChannel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserChannelAggregateArgs>(args: Subset<T, UserChannelAggregateArgs>): Prisma.PrismaPromise<GetUserChannelAggregateType<T>>

    /**
     * Group by UserChannel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserChannelGroupByArgs['orderBy'] }
        : { orderBy?: UserChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserChannel model
   */
  readonly fields: UserChannelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserChannel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserChannelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    channel<T extends ChannelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChannelDefaultArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserChannel model
   */ 
  interface UserChannelFieldRefs {
    readonly id: FieldRef<"UserChannel", 'Int'>
    readonly userId: FieldRef<"UserChannel", 'Int'>
    readonly channelId: FieldRef<"UserChannel", 'Int'>
    readonly lastRead: FieldRef<"UserChannel", 'Int'>
    readonly isBlocked: FieldRef<"UserChannel", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * UserChannel findUnique
   */
  export type UserChannelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
    /**
     * Filter, which UserChannel to fetch.
     */
    where: UserChannelWhereUniqueInput
  }


  /**
   * UserChannel findUniqueOrThrow
   */
  export type UserChannelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
    /**
     * Filter, which UserChannel to fetch.
     */
    where: UserChannelWhereUniqueInput
  }


  /**
   * UserChannel findFirst
   */
  export type UserChannelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
    /**
     * Filter, which UserChannel to fetch.
     */
    where?: UserChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserChannels to fetch.
     */
    orderBy?: UserChannelOrderByWithRelationInput | UserChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserChannels.
     */
    cursor?: UserChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserChannels.
     */
    distinct?: UserChannelScalarFieldEnum | UserChannelScalarFieldEnum[]
  }


  /**
   * UserChannel findFirstOrThrow
   */
  export type UserChannelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
    /**
     * Filter, which UserChannel to fetch.
     */
    where?: UserChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserChannels to fetch.
     */
    orderBy?: UserChannelOrderByWithRelationInput | UserChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserChannels.
     */
    cursor?: UserChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserChannels.
     */
    distinct?: UserChannelScalarFieldEnum | UserChannelScalarFieldEnum[]
  }


  /**
   * UserChannel findMany
   */
  export type UserChannelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
    /**
     * Filter, which UserChannels to fetch.
     */
    where?: UserChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserChannels to fetch.
     */
    orderBy?: UserChannelOrderByWithRelationInput | UserChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserChannels.
     */
    cursor?: UserChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserChannels.
     */
    skip?: number
    distinct?: UserChannelScalarFieldEnum | UserChannelScalarFieldEnum[]
  }


  /**
   * UserChannel create
   */
  export type UserChannelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
    /**
     * The data needed to create a UserChannel.
     */
    data: XOR<UserChannelCreateInput, UserChannelUncheckedCreateInput>
  }


  /**
   * UserChannel createMany
   */
  export type UserChannelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserChannels.
     */
    data: UserChannelCreateManyInput | UserChannelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserChannel update
   */
  export type UserChannelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
    /**
     * The data needed to update a UserChannel.
     */
    data: XOR<UserChannelUpdateInput, UserChannelUncheckedUpdateInput>
    /**
     * Choose, which UserChannel to update.
     */
    where: UserChannelWhereUniqueInput
  }


  /**
   * UserChannel updateMany
   */
  export type UserChannelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserChannels.
     */
    data: XOR<UserChannelUpdateManyMutationInput, UserChannelUncheckedUpdateManyInput>
    /**
     * Filter which UserChannels to update
     */
    where?: UserChannelWhereInput
  }


  /**
   * UserChannel upsert
   */
  export type UserChannelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
    /**
     * The filter to search for the UserChannel to update in case it exists.
     */
    where: UserChannelWhereUniqueInput
    /**
     * In case the UserChannel found by the `where` argument doesn't exist, create a new UserChannel with this data.
     */
    create: XOR<UserChannelCreateInput, UserChannelUncheckedCreateInput>
    /**
     * In case the UserChannel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserChannelUpdateInput, UserChannelUncheckedUpdateInput>
  }


  /**
   * UserChannel delete
   */
  export type UserChannelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
    /**
     * Filter which UserChannel to delete.
     */
    where: UserChannelWhereUniqueInput
  }


  /**
   * UserChannel deleteMany
   */
  export type UserChannelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserChannels to delete
     */
    where?: UserChannelWhereInput
  }


  /**
   * UserChannel without action
   */
  export type UserChannelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserChannel
     */
    select?: UserChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChannelInclude<ExtArgs> | null
  }



  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    content: string | null
    userId: number | null
    channelId: number | null
    created_at: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    content: string | null
    userId: number | null
    channelId: number | null
    created_at: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    content: number
    userId: number
    channelId: number
    created_at: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    channelId?: true
    created_at?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    channelId?: true
    created_at?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    channelId?: true
    created_at?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    content: string
    userId: number
    channelId: number
    created_at: Date
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    channelId?: boolean
    created_at?: boolean
    readBy?: boolean | Message$readByArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    content?: boolean
    userId?: boolean
    channelId?: boolean
    created_at?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    readBy?: boolean | Message$readByArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MessagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      readBy: Prisma.$UserPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      channel: Prisma.$ChannelPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      content: string
      userId: number
      channelId: number
      created_at: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }


  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageCreateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    readBy<T extends Message$readByArgs<ExtArgs> = {}>(args?: Subset<T, Message$readByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    channel<T extends ChannelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChannelDefaultArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'Int'>
    readonly content: FieldRef<"Message", 'String'>
    readonly userId: FieldRef<"Message", 'Int'>
    readonly channelId: FieldRef<"Message", 'Int'>
    readonly created_at: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message.readBy
   */
  export type Message$readByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    avatar: 'avatar',
    username: 'username',
    secretO2FA: 'secretO2FA',
    session: 'session',
    xp: 'xp',
    role: 'role',
    status: 'status'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserFriendshipScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    targetId: 'targetId',
    acceptedAt: 'acceptedAt'
  };

  export type UserFriendshipScalarFieldEnum = (typeof UserFriendshipScalarFieldEnum)[keyof typeof UserFriendshipScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const UserMatchScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    matchId: 'matchId',
    score: 'score',
    isWin: 'isWin'
  };

  export type UserMatchScalarFieldEnum = (typeof UserMatchScalarFieldEnum)[keyof typeof UserMatchScalarFieldEnum]


  export const BlockScalarFieldEnum: {
    id: 'id',
    blockerId: 'blockerId',
    blockedId: 'blockedId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BlockScalarFieldEnum = (typeof BlockScalarFieldEnum)[keyof typeof BlockScalarFieldEnum]


  export const ChannelScalarFieldEnum: {
    id: 'id',
    conv: 'conv',
    name: 'name',
    password: 'password',
    creatorId: 'creatorId',
    created_at: 'created_at'
  };

  export type ChannelScalarFieldEnum = (typeof ChannelScalarFieldEnum)[keyof typeof ChannelScalarFieldEnum]


  export const UserChannelScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    channelId: 'channelId',
    lastRead: 'lastRead',
    isBlocked: 'isBlocked'
  };

  export type UserChannelScalarFieldEnum = (typeof UserChannelScalarFieldEnum)[keyof typeof UserChannelScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    userId: 'userId',
    channelId: 'channelId',
    created_at: 'created_at'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    avatar?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    secretO2FA?: StringNullableFilter<"User"> | string | null
    session?: StringNullableFilter<"User"> | string | null
    xp?: IntFilter<"User"> | number
    role?: IntFilter<"User"> | number
    status?: EnumStatusFilter<"User"> | $Enums.Status
    userMatches?: UserMatchListRelationFilter
    userFriendships?: UserFriendshipListRelationFilter
    blocksInitiated?: BlockListRelationFilter
    blocksReceived?: BlockListRelationFilter
    channels?: UserChannelListRelationFilter
    createdChannels?: ChannelListRelationFilter
    messages?: MessageListRelationFilter
    messagesReaded?: MessageListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    avatar?: SortOrder
    username?: SortOrder
    secretO2FA?: SortOrderInput | SortOrder
    session?: SortOrderInput | SortOrder
    xp?: SortOrder
    role?: SortOrder
    status?: SortOrder
    userMatches?: UserMatchOrderByRelationAggregateInput
    userFriendships?: UserFriendshipOrderByRelationAggregateInput
    blocksInitiated?: BlockOrderByRelationAggregateInput
    blocksReceived?: BlockOrderByRelationAggregateInput
    channels?: UserChannelOrderByRelationAggregateInput
    createdChannels?: ChannelOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    messagesReaded?: MessageOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    avatar?: StringFilter<"User"> | string
    secretO2FA?: StringNullableFilter<"User"> | string | null
    session?: StringNullableFilter<"User"> | string | null
    xp?: IntFilter<"User"> | number
    role?: IntFilter<"User"> | number
    status?: EnumStatusFilter<"User"> | $Enums.Status
    userMatches?: UserMatchListRelationFilter
    userFriendships?: UserFriendshipListRelationFilter
    blocksInitiated?: BlockListRelationFilter
    blocksReceived?: BlockListRelationFilter
    channels?: UserChannelListRelationFilter
    createdChannels?: ChannelListRelationFilter
    messages?: MessageListRelationFilter
    messagesReaded?: MessageListRelationFilter
  }, "id" | "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    avatar?: SortOrder
    username?: SortOrder
    secretO2FA?: SortOrderInput | SortOrder
    session?: SortOrderInput | SortOrder
    xp?: SortOrder
    role?: SortOrder
    status?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    avatar?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    secretO2FA?: StringNullableWithAggregatesFilter<"User"> | string | null
    session?: StringNullableWithAggregatesFilter<"User"> | string | null
    xp?: IntWithAggregatesFilter<"User"> | number
    role?: IntWithAggregatesFilter<"User"> | number
    status?: EnumStatusWithAggregatesFilter<"User"> | $Enums.Status
  }

  export type UserFriendshipWhereInput = {
    AND?: UserFriendshipWhereInput | UserFriendshipWhereInput[]
    OR?: UserFriendshipWhereInput[]
    NOT?: UserFriendshipWhereInput | UserFriendshipWhereInput[]
    id?: IntFilter<"UserFriendship"> | number
    senderId?: IntFilter<"UserFriendship"> | number
    targetId?: IntFilter<"UserFriendship"> | number
    acceptedAt?: DateTimeNullableFilter<"UserFriendship"> | Date | string | null
    target?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserFriendshipOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    targetId?: SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    target?: UserOrderByWithRelationInput
  }

  export type UserFriendshipWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserFriendshipWhereInput | UserFriendshipWhereInput[]
    OR?: UserFriendshipWhereInput[]
    NOT?: UserFriendshipWhereInput | UserFriendshipWhereInput[]
    senderId?: IntFilter<"UserFriendship"> | number
    targetId?: IntFilter<"UserFriendship"> | number
    acceptedAt?: DateTimeNullableFilter<"UserFriendship"> | Date | string | null
    target?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserFriendshipOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    targetId?: SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    _count?: UserFriendshipCountOrderByAggregateInput
    _avg?: UserFriendshipAvgOrderByAggregateInput
    _max?: UserFriendshipMaxOrderByAggregateInput
    _min?: UserFriendshipMinOrderByAggregateInput
    _sum?: UserFriendshipSumOrderByAggregateInput
  }

  export type UserFriendshipScalarWhereWithAggregatesInput = {
    AND?: UserFriendshipScalarWhereWithAggregatesInput | UserFriendshipScalarWhereWithAggregatesInput[]
    OR?: UserFriendshipScalarWhereWithAggregatesInput[]
    NOT?: UserFriendshipScalarWhereWithAggregatesInput | UserFriendshipScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserFriendship"> | number
    senderId?: IntWithAggregatesFilter<"UserFriendship"> | number
    targetId?: IntWithAggregatesFilter<"UserFriendship"> | number
    acceptedAt?: DateTimeNullableWithAggregatesFilter<"UserFriendship"> | Date | string | null
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    id?: IntFilter<"Match"> | number
    users?: UserMatchListRelationFilter
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    users?: UserMatchOrderByRelationAggregateInput
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    users?: UserMatchListRelationFilter
  }, "id">

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _avg?: MatchAvgOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
    _sum?: MatchSumOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Match"> | number
  }

  export type UserMatchWhereInput = {
    AND?: UserMatchWhereInput | UserMatchWhereInput[]
    OR?: UserMatchWhereInput[]
    NOT?: UserMatchWhereInput | UserMatchWhereInput[]
    id?: IntFilter<"UserMatch"> | number
    userId?: IntFilter<"UserMatch"> | number
    matchId?: IntFilter<"UserMatch"> | number
    score?: IntFilter<"UserMatch"> | number
    isWin?: BoolFilter<"UserMatch"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    match?: XOR<MatchRelationFilter, MatchWhereInput>
  }

  export type UserMatchOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    score?: SortOrder
    isWin?: SortOrder
    user?: UserOrderByWithRelationInput
    match?: MatchOrderByWithRelationInput
  }

  export type UserMatchWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserMatchWhereInput | UserMatchWhereInput[]
    OR?: UserMatchWhereInput[]
    NOT?: UserMatchWhereInput | UserMatchWhereInput[]
    userId?: IntFilter<"UserMatch"> | number
    matchId?: IntFilter<"UserMatch"> | number
    score?: IntFilter<"UserMatch"> | number
    isWin?: BoolFilter<"UserMatch"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    match?: XOR<MatchRelationFilter, MatchWhereInput>
  }, "id">

  export type UserMatchOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    score?: SortOrder
    isWin?: SortOrder
    _count?: UserMatchCountOrderByAggregateInput
    _avg?: UserMatchAvgOrderByAggregateInput
    _max?: UserMatchMaxOrderByAggregateInput
    _min?: UserMatchMinOrderByAggregateInput
    _sum?: UserMatchSumOrderByAggregateInput
  }

  export type UserMatchScalarWhereWithAggregatesInput = {
    AND?: UserMatchScalarWhereWithAggregatesInput | UserMatchScalarWhereWithAggregatesInput[]
    OR?: UserMatchScalarWhereWithAggregatesInput[]
    NOT?: UserMatchScalarWhereWithAggregatesInput | UserMatchScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserMatch"> | number
    userId?: IntWithAggregatesFilter<"UserMatch"> | number
    matchId?: IntWithAggregatesFilter<"UserMatch"> | number
    score?: IntWithAggregatesFilter<"UserMatch"> | number
    isWin?: BoolWithAggregatesFilter<"UserMatch"> | boolean
  }

  export type BlockWhereInput = {
    AND?: BlockWhereInput | BlockWhereInput[]
    OR?: BlockWhereInput[]
    NOT?: BlockWhereInput | BlockWhereInput[]
    id?: IntFilter<"Block"> | number
    blockerId?: IntFilter<"Block"> | number
    blockedId?: IntFilter<"Block"> | number
    createdAt?: DateTimeFilter<"Block"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Block"> | Date | string | null
    blockedBy?: XOR<UserRelationFilter, UserWhereInput>
    receivedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BlockOrderByWithRelationInput = {
    id?: SortOrder
    blockerId?: SortOrder
    blockedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    blockedBy?: UserOrderByWithRelationInput
    receivedBy?: UserOrderByWithRelationInput
  }

  export type BlockWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BlockWhereInput | BlockWhereInput[]
    OR?: BlockWhereInput[]
    NOT?: BlockWhereInput | BlockWhereInput[]
    blockerId?: IntFilter<"Block"> | number
    blockedId?: IntFilter<"Block"> | number
    createdAt?: DateTimeFilter<"Block"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Block"> | Date | string | null
    blockedBy?: XOR<UserRelationFilter, UserWhereInput>
    receivedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type BlockOrderByWithAggregationInput = {
    id?: SortOrder
    blockerId?: SortOrder
    blockedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: BlockCountOrderByAggregateInput
    _avg?: BlockAvgOrderByAggregateInput
    _max?: BlockMaxOrderByAggregateInput
    _min?: BlockMinOrderByAggregateInput
    _sum?: BlockSumOrderByAggregateInput
  }

  export type BlockScalarWhereWithAggregatesInput = {
    AND?: BlockScalarWhereWithAggregatesInput | BlockScalarWhereWithAggregatesInput[]
    OR?: BlockScalarWhereWithAggregatesInput[]
    NOT?: BlockScalarWhereWithAggregatesInput | BlockScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Block"> | number
    blockerId?: IntWithAggregatesFilter<"Block"> | number
    blockedId?: IntWithAggregatesFilter<"Block"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Block"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Block"> | Date | string | null
  }

  export type ChannelWhereInput = {
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    id?: IntFilter<"Channel"> | number
    conv?: BoolFilter<"Channel"> | boolean
    name?: StringNullableFilter<"Channel"> | string | null
    password?: StringNullableFilter<"Channel"> | string | null
    creatorId?: IntNullableFilter<"Channel"> | number | null
    created_at?: DateTimeFilter<"Channel"> | Date | string
    creator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    users?: UserChannelListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type ChannelOrderByWithRelationInput = {
    id?: SortOrder
    conv?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    creatorId?: SortOrderInput | SortOrder
    created_at?: SortOrder
    creator?: UserOrderByWithRelationInput
    users?: UserChannelOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ChannelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    conv?: BoolFilter<"Channel"> | boolean
    password?: StringNullableFilter<"Channel"> | string | null
    creatorId?: IntNullableFilter<"Channel"> | number | null
    created_at?: DateTimeFilter<"Channel"> | Date | string
    creator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    users?: UserChannelListRelationFilter
    messages?: MessageListRelationFilter
  }, "id" | "name">

  export type ChannelOrderByWithAggregationInput = {
    id?: SortOrder
    conv?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    creatorId?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: ChannelCountOrderByAggregateInput
    _avg?: ChannelAvgOrderByAggregateInput
    _max?: ChannelMaxOrderByAggregateInput
    _min?: ChannelMinOrderByAggregateInput
    _sum?: ChannelSumOrderByAggregateInput
  }

  export type ChannelScalarWhereWithAggregatesInput = {
    AND?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    OR?: ChannelScalarWhereWithAggregatesInput[]
    NOT?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Channel"> | number
    conv?: BoolWithAggregatesFilter<"Channel"> | boolean
    name?: StringNullableWithAggregatesFilter<"Channel"> | string | null
    password?: StringNullableWithAggregatesFilter<"Channel"> | string | null
    creatorId?: IntNullableWithAggregatesFilter<"Channel"> | number | null
    created_at?: DateTimeWithAggregatesFilter<"Channel"> | Date | string
  }

  export type UserChannelWhereInput = {
    AND?: UserChannelWhereInput | UserChannelWhereInput[]
    OR?: UserChannelWhereInput[]
    NOT?: UserChannelWhereInput | UserChannelWhereInput[]
    id?: IntFilter<"UserChannel"> | number
    userId?: IntFilter<"UserChannel"> | number
    channelId?: IntFilter<"UserChannel"> | number
    lastRead?: IntFilter<"UserChannel"> | number
    isBlocked?: BoolFilter<"UserChannel"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type UserChannelOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    lastRead?: SortOrder
    isBlocked?: SortOrder
    user?: UserOrderByWithRelationInput
    channel?: ChannelOrderByWithRelationInput
  }

  export type UserChannelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserChannelWhereInput | UserChannelWhereInput[]
    OR?: UserChannelWhereInput[]
    NOT?: UserChannelWhereInput | UserChannelWhereInput[]
    userId?: IntFilter<"UserChannel"> | number
    channelId?: IntFilter<"UserChannel"> | number
    lastRead?: IntFilter<"UserChannel"> | number
    isBlocked?: BoolFilter<"UserChannel"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }, "id">

  export type UserChannelOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    lastRead?: SortOrder
    isBlocked?: SortOrder
    _count?: UserChannelCountOrderByAggregateInput
    _avg?: UserChannelAvgOrderByAggregateInput
    _max?: UserChannelMaxOrderByAggregateInput
    _min?: UserChannelMinOrderByAggregateInput
    _sum?: UserChannelSumOrderByAggregateInput
  }

  export type UserChannelScalarWhereWithAggregatesInput = {
    AND?: UserChannelScalarWhereWithAggregatesInput | UserChannelScalarWhereWithAggregatesInput[]
    OR?: UserChannelScalarWhereWithAggregatesInput[]
    NOT?: UserChannelScalarWhereWithAggregatesInput | UserChannelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserChannel"> | number
    userId?: IntWithAggregatesFilter<"UserChannel"> | number
    channelId?: IntWithAggregatesFilter<"UserChannel"> | number
    lastRead?: IntWithAggregatesFilter<"UserChannel"> | number
    isBlocked?: BoolWithAggregatesFilter<"UserChannel"> | boolean
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    userId?: IntFilter<"Message"> | number
    channelId?: IntFilter<"Message"> | number
    created_at?: DateTimeFilter<"Message"> | Date | string
    readBy?: UserListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    created_at?: SortOrder
    readBy?: UserOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    channel?: ChannelOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    content?: StringFilter<"Message"> | string
    userId?: IntFilter<"Message"> | number
    channelId?: IntFilter<"Message"> | number
    created_at?: DateTimeFilter<"Message"> | Date | string
    readBy?: UserListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    created_at?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Message"> | number
    content?: StringWithAggregatesFilter<"Message"> | string
    userId?: IntWithAggregatesFilter<"Message"> | number
    channelId?: IntWithAggregatesFilter<"Message"> | number
    created_at?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type UserCreateInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelCreateNestedManyWithoutUserInput
    createdChannels?: ChannelCreateNestedManyWithoutCreatorInput
    messages?: MessageCreateNestedManyWithoutUserInput
    messagesReaded?: MessageCreateNestedManyWithoutReadByInput
  }

  export type UserUncheckedCreateInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchUncheckedCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipUncheckedCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockUncheckedCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockUncheckedCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelUncheckedCreateNestedManyWithoutUserInput
    createdChannels?: ChannelUncheckedCreateNestedManyWithoutCreatorInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    messagesReaded?: MessageUncheckedCreateNestedManyWithoutReadByInput
  }

  export type UserUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUpdateManyWithoutCreatorNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUpdateManyWithoutReadByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUncheckedUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUncheckedUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUncheckedUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUncheckedUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUncheckedUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUncheckedUpdateManyWithoutCreatorNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUncheckedUpdateManyWithoutReadByNestedInput
  }

  export type UserCreateManyInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
  }

  export type UserUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type UserFriendshipCreateInput = {
    senderId: number
    acceptedAt?: Date | string | null
    target: UserCreateNestedOneWithoutUserFriendshipsInput
  }

  export type UserFriendshipUncheckedCreateInput = {
    id?: number
    senderId: number
    targetId: number
    acceptedAt?: Date | string | null
  }

  export type UserFriendshipUpdateInput = {
    senderId?: IntFieldUpdateOperationsInput | number
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    target?: UserUpdateOneRequiredWithoutUserFriendshipsNestedInput
  }

  export type UserFriendshipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserFriendshipCreateManyInput = {
    id?: number
    senderId: number
    targetId: number
    acceptedAt?: Date | string | null
  }

  export type UserFriendshipUpdateManyMutationInput = {
    senderId?: IntFieldUpdateOperationsInput | number
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserFriendshipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MatchCreateInput = {
    users?: UserMatchCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateInput = {
    id?: number
    users?: UserMatchUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchUpdateInput = {
    users?: UserMatchUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    users?: UserMatchUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchCreateManyInput = {
    id?: number
  }

  export type MatchUpdateManyMutationInput = {

  }

  export type MatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type UserMatchCreateInput = {
    score: number
    isWin: boolean
    user: UserCreateNestedOneWithoutUserMatchesInput
    match: MatchCreateNestedOneWithoutUsersInput
  }

  export type UserMatchUncheckedCreateInput = {
    id?: number
    userId: number
    matchId: number
    score: number
    isWin: boolean
  }

  export type UserMatchUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserMatchesNestedInput
    match?: MatchUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserMatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    matchId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserMatchCreateManyInput = {
    id?: number
    userId: number
    matchId: number
    score: number
    isWin: boolean
  }

  export type UserMatchUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserMatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    matchId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BlockCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string | null
    blockedBy: UserCreateNestedOneWithoutBlocksInitiatedInput
    receivedBy: UserCreateNestedOneWithoutBlocksReceivedInput
  }

  export type BlockUncheckedCreateInput = {
    id?: number
    blockerId: number
    blockedId: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type BlockUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    blockedBy?: UserUpdateOneRequiredWithoutBlocksInitiatedNestedInput
    receivedBy?: UserUpdateOneRequiredWithoutBlocksReceivedNestedInput
  }

  export type BlockUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockerId?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BlockCreateManyInput = {
    id?: number
    blockerId: number
    blockedId: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type BlockUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BlockUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockerId?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChannelCreateInput = {
    conv?: boolean
    name?: string | null
    password?: string | null
    created_at: Date | string
    creator?: UserCreateNestedOneWithoutCreatedChannelsInput
    users?: UserChannelCreateNestedManyWithoutChannelInput
    messages?: MessageCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateInput = {
    id?: number
    conv?: boolean
    name?: string | null
    password?: string | null
    creatorId?: number | null
    created_at: Date | string
    users?: UserChannelUncheckedCreateNestedManyWithoutChannelInput
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelUpdateInput = {
    conv?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedChannelsNestedInput
    users?: UserChannelUpdateManyWithoutChannelNestedInput
    messages?: MessageUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    conv?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserChannelUncheckedUpdateManyWithoutChannelNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateManyInput = {
    id?: number
    conv?: boolean
    name?: string | null
    password?: string | null
    creatorId?: number | null
    created_at: Date | string
  }

  export type ChannelUpdateManyMutationInput = {
    conv?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChannelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    conv?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserChannelCreateInput = {
    lastRead?: number
    isBlocked?: boolean
    user: UserCreateNestedOneWithoutChannelsInput
    channel: ChannelCreateNestedOneWithoutUsersInput
  }

  export type UserChannelUncheckedCreateInput = {
    id?: number
    userId: number
    channelId: number
    lastRead?: number
    isBlocked?: boolean
  }

  export type UserChannelUpdateInput = {
    lastRead?: IntFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutChannelsNestedInput
    channel?: ChannelUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserChannelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    lastRead?: IntFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserChannelCreateManyInput = {
    id?: number
    userId: number
    channelId: number
    lastRead?: number
    isBlocked?: boolean
  }

  export type UserChannelUpdateManyMutationInput = {
    lastRead?: IntFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserChannelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    lastRead?: IntFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageCreateInput = {
    content: string
    created_at?: Date | string
    readBy?: UserCreateNestedManyWithoutMessagesReadedInput
    user: UserCreateNestedOneWithoutMessagesInput
    channel: ChannelCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    content: string
    userId: number
    channelId: number
    created_at?: Date | string
    readBy?: UserUncheckedCreateNestedManyWithoutMessagesReadedInput
  }

  export type MessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    readBy?: UserUpdateManyWithoutMessagesReadedNestedInput
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    channel?: ChannelUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    readBy?: UserUncheckedUpdateManyWithoutMessagesReadedNestedInput
  }

  export type MessageCreateManyInput = {
    id?: number
    content: string
    userId: number
    channelId: number
    created_at?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type UserMatchListRelationFilter = {
    every?: UserMatchWhereInput
    some?: UserMatchWhereInput
    none?: UserMatchWhereInput
  }

  export type UserFriendshipListRelationFilter = {
    every?: UserFriendshipWhereInput
    some?: UserFriendshipWhereInput
    none?: UserFriendshipWhereInput
  }

  export type BlockListRelationFilter = {
    every?: BlockWhereInput
    some?: BlockWhereInput
    none?: BlockWhereInput
  }

  export type UserChannelListRelationFilter = {
    every?: UserChannelWhereInput
    some?: UserChannelWhereInput
    none?: UserChannelWhereInput
  }

  export type ChannelListRelationFilter = {
    every?: ChannelWhereInput
    some?: ChannelWhereInput
    none?: ChannelWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserMatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserFriendshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BlockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserChannelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChannelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    avatar?: SortOrder
    username?: SortOrder
    secretO2FA?: SortOrder
    session?: SortOrder
    xp?: SortOrder
    role?: SortOrder
    status?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    xp?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    avatar?: SortOrder
    username?: SortOrder
    secretO2FA?: SortOrder
    session?: SortOrder
    xp?: SortOrder
    role?: SortOrder
    status?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    avatar?: SortOrder
    username?: SortOrder
    secretO2FA?: SortOrder
    session?: SortOrder
    xp?: SortOrder
    role?: SortOrder
    status?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    xp?: SortOrder
    role?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserFriendshipCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    targetId?: SortOrder
    acceptedAt?: SortOrder
  }

  export type UserFriendshipAvgOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    targetId?: SortOrder
  }

  export type UserFriendshipMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    targetId?: SortOrder
    acceptedAt?: SortOrder
  }

  export type UserFriendshipMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    targetId?: SortOrder
    acceptedAt?: SortOrder
  }

  export type UserFriendshipSumOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    targetId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MatchAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MatchSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MatchRelationFilter = {
    is?: MatchWhereInput
    isNot?: MatchWhereInput
  }

  export type UserMatchCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    score?: SortOrder
    isWin?: SortOrder
  }

  export type UserMatchAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    score?: SortOrder
  }

  export type UserMatchMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    score?: SortOrder
    isWin?: SortOrder
  }

  export type UserMatchMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    score?: SortOrder
    isWin?: SortOrder
  }

  export type UserMatchSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    score?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BlockCountOrderByAggregateInput = {
    id?: SortOrder
    blockerId?: SortOrder
    blockedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlockAvgOrderByAggregateInput = {
    id?: SortOrder
    blockerId?: SortOrder
    blockedId?: SortOrder
  }

  export type BlockMaxOrderByAggregateInput = {
    id?: SortOrder
    blockerId?: SortOrder
    blockedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlockMinOrderByAggregateInput = {
    id?: SortOrder
    blockerId?: SortOrder
    blockedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlockSumOrderByAggregateInput = {
    id?: SortOrder
    blockerId?: SortOrder
    blockedId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ChannelCountOrderByAggregateInput = {
    id?: SortOrder
    conv?: SortOrder
    name?: SortOrder
    password?: SortOrder
    creatorId?: SortOrder
    created_at?: SortOrder
  }

  export type ChannelAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
  }

  export type ChannelMaxOrderByAggregateInput = {
    id?: SortOrder
    conv?: SortOrder
    name?: SortOrder
    password?: SortOrder
    creatorId?: SortOrder
    created_at?: SortOrder
  }

  export type ChannelMinOrderByAggregateInput = {
    id?: SortOrder
    conv?: SortOrder
    name?: SortOrder
    password?: SortOrder
    creatorId?: SortOrder
    created_at?: SortOrder
  }

  export type ChannelSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ChannelRelationFilter = {
    is?: ChannelWhereInput
    isNot?: ChannelWhereInput
  }

  export type UserChannelCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    lastRead?: SortOrder
    isBlocked?: SortOrder
  }

  export type UserChannelAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    lastRead?: SortOrder
  }

  export type UserChannelMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    lastRead?: SortOrder
    isBlocked?: SortOrder
  }

  export type UserChannelMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    lastRead?: SortOrder
    isBlocked?: SortOrder
  }

  export type UserChannelSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    lastRead?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    created_at?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    created_at?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    created_at?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
  }

  export type UserMatchCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMatchCreateWithoutUserInput, UserMatchUncheckedCreateWithoutUserInput> | UserMatchCreateWithoutUserInput[] | UserMatchUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMatchCreateOrConnectWithoutUserInput | UserMatchCreateOrConnectWithoutUserInput[]
    createMany?: UserMatchCreateManyUserInputEnvelope
    connect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
  }

  export type UserFriendshipCreateNestedManyWithoutTargetInput = {
    create?: XOR<UserFriendshipCreateWithoutTargetInput, UserFriendshipUncheckedCreateWithoutTargetInput> | UserFriendshipCreateWithoutTargetInput[] | UserFriendshipUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: UserFriendshipCreateOrConnectWithoutTargetInput | UserFriendshipCreateOrConnectWithoutTargetInput[]
    createMany?: UserFriendshipCreateManyTargetInputEnvelope
    connect?: UserFriendshipWhereUniqueInput | UserFriendshipWhereUniqueInput[]
  }

  export type BlockCreateNestedManyWithoutBlockedByInput = {
    create?: XOR<BlockCreateWithoutBlockedByInput, BlockUncheckedCreateWithoutBlockedByInput> | BlockCreateWithoutBlockedByInput[] | BlockUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: BlockCreateOrConnectWithoutBlockedByInput | BlockCreateOrConnectWithoutBlockedByInput[]
    createMany?: BlockCreateManyBlockedByInputEnvelope
    connect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
  }

  export type BlockCreateNestedManyWithoutReceivedByInput = {
    create?: XOR<BlockCreateWithoutReceivedByInput, BlockUncheckedCreateWithoutReceivedByInput> | BlockCreateWithoutReceivedByInput[] | BlockUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: BlockCreateOrConnectWithoutReceivedByInput | BlockCreateOrConnectWithoutReceivedByInput[]
    createMany?: BlockCreateManyReceivedByInputEnvelope
    connect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
  }

  export type UserChannelCreateNestedManyWithoutUserInput = {
    create?: XOR<UserChannelCreateWithoutUserInput, UserChannelUncheckedCreateWithoutUserInput> | UserChannelCreateWithoutUserInput[] | UserChannelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserChannelCreateOrConnectWithoutUserInput | UserChannelCreateOrConnectWithoutUserInput[]
    createMany?: UserChannelCreateManyUserInputEnvelope
    connect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
  }

  export type ChannelCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ChannelCreateWithoutCreatorInput, ChannelUncheckedCreateWithoutCreatorInput> | ChannelCreateWithoutCreatorInput[] | ChannelUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChannelCreateOrConnectWithoutCreatorInput | ChannelCreateOrConnectWithoutCreatorInput[]
    createMany?: ChannelCreateManyCreatorInputEnvelope
    connect?: ChannelWhereUniqueInput | ChannelWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReadByInput = {
    create?: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput> | MessageCreateWithoutReadByInput[] | MessageUncheckedCreateWithoutReadByInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReadByInput | MessageCreateOrConnectWithoutReadByInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UserMatchUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMatchCreateWithoutUserInput, UserMatchUncheckedCreateWithoutUserInput> | UserMatchCreateWithoutUserInput[] | UserMatchUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMatchCreateOrConnectWithoutUserInput | UserMatchCreateOrConnectWithoutUserInput[]
    createMany?: UserMatchCreateManyUserInputEnvelope
    connect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
  }

  export type UserFriendshipUncheckedCreateNestedManyWithoutTargetInput = {
    create?: XOR<UserFriendshipCreateWithoutTargetInput, UserFriendshipUncheckedCreateWithoutTargetInput> | UserFriendshipCreateWithoutTargetInput[] | UserFriendshipUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: UserFriendshipCreateOrConnectWithoutTargetInput | UserFriendshipCreateOrConnectWithoutTargetInput[]
    createMany?: UserFriendshipCreateManyTargetInputEnvelope
    connect?: UserFriendshipWhereUniqueInput | UserFriendshipWhereUniqueInput[]
  }

  export type BlockUncheckedCreateNestedManyWithoutBlockedByInput = {
    create?: XOR<BlockCreateWithoutBlockedByInput, BlockUncheckedCreateWithoutBlockedByInput> | BlockCreateWithoutBlockedByInput[] | BlockUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: BlockCreateOrConnectWithoutBlockedByInput | BlockCreateOrConnectWithoutBlockedByInput[]
    createMany?: BlockCreateManyBlockedByInputEnvelope
    connect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
  }

  export type BlockUncheckedCreateNestedManyWithoutReceivedByInput = {
    create?: XOR<BlockCreateWithoutReceivedByInput, BlockUncheckedCreateWithoutReceivedByInput> | BlockCreateWithoutReceivedByInput[] | BlockUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: BlockCreateOrConnectWithoutReceivedByInput | BlockCreateOrConnectWithoutReceivedByInput[]
    createMany?: BlockCreateManyReceivedByInputEnvelope
    connect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
  }

  export type UserChannelUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserChannelCreateWithoutUserInput, UserChannelUncheckedCreateWithoutUserInput> | UserChannelCreateWithoutUserInput[] | UserChannelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserChannelCreateOrConnectWithoutUserInput | UserChannelCreateOrConnectWithoutUserInput[]
    createMany?: UserChannelCreateManyUserInputEnvelope
    connect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
  }

  export type ChannelUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ChannelCreateWithoutCreatorInput, ChannelUncheckedCreateWithoutCreatorInput> | ChannelCreateWithoutCreatorInput[] | ChannelUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChannelCreateOrConnectWithoutCreatorInput | ChannelCreateOrConnectWithoutCreatorInput[]
    createMany?: ChannelCreateManyCreatorInputEnvelope
    connect?: ChannelWhereUniqueInput | ChannelWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReadByInput = {
    create?: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput> | MessageCreateWithoutReadByInput[] | MessageUncheckedCreateWithoutReadByInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReadByInput | MessageCreateOrConnectWithoutReadByInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type UserMatchUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMatchCreateWithoutUserInput, UserMatchUncheckedCreateWithoutUserInput> | UserMatchCreateWithoutUserInput[] | UserMatchUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMatchCreateOrConnectWithoutUserInput | UserMatchCreateOrConnectWithoutUserInput[]
    upsert?: UserMatchUpsertWithWhereUniqueWithoutUserInput | UserMatchUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMatchCreateManyUserInputEnvelope
    set?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    disconnect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    delete?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    connect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    update?: UserMatchUpdateWithWhereUniqueWithoutUserInput | UserMatchUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMatchUpdateManyWithWhereWithoutUserInput | UserMatchUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMatchScalarWhereInput | UserMatchScalarWhereInput[]
  }

  export type UserFriendshipUpdateManyWithoutTargetNestedInput = {
    create?: XOR<UserFriendshipCreateWithoutTargetInput, UserFriendshipUncheckedCreateWithoutTargetInput> | UserFriendshipCreateWithoutTargetInput[] | UserFriendshipUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: UserFriendshipCreateOrConnectWithoutTargetInput | UserFriendshipCreateOrConnectWithoutTargetInput[]
    upsert?: UserFriendshipUpsertWithWhereUniqueWithoutTargetInput | UserFriendshipUpsertWithWhereUniqueWithoutTargetInput[]
    createMany?: UserFriendshipCreateManyTargetInputEnvelope
    set?: UserFriendshipWhereUniqueInput | UserFriendshipWhereUniqueInput[]
    disconnect?: UserFriendshipWhereUniqueInput | UserFriendshipWhereUniqueInput[]
    delete?: UserFriendshipWhereUniqueInput | UserFriendshipWhereUniqueInput[]
    connect?: UserFriendshipWhereUniqueInput | UserFriendshipWhereUniqueInput[]
    update?: UserFriendshipUpdateWithWhereUniqueWithoutTargetInput | UserFriendshipUpdateWithWhereUniqueWithoutTargetInput[]
    updateMany?: UserFriendshipUpdateManyWithWhereWithoutTargetInput | UserFriendshipUpdateManyWithWhereWithoutTargetInput[]
    deleteMany?: UserFriendshipScalarWhereInput | UserFriendshipScalarWhereInput[]
  }

  export type BlockUpdateManyWithoutBlockedByNestedInput = {
    create?: XOR<BlockCreateWithoutBlockedByInput, BlockUncheckedCreateWithoutBlockedByInput> | BlockCreateWithoutBlockedByInput[] | BlockUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: BlockCreateOrConnectWithoutBlockedByInput | BlockCreateOrConnectWithoutBlockedByInput[]
    upsert?: BlockUpsertWithWhereUniqueWithoutBlockedByInput | BlockUpsertWithWhereUniqueWithoutBlockedByInput[]
    createMany?: BlockCreateManyBlockedByInputEnvelope
    set?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    disconnect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    delete?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    connect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    update?: BlockUpdateWithWhereUniqueWithoutBlockedByInput | BlockUpdateWithWhereUniqueWithoutBlockedByInput[]
    updateMany?: BlockUpdateManyWithWhereWithoutBlockedByInput | BlockUpdateManyWithWhereWithoutBlockedByInput[]
    deleteMany?: BlockScalarWhereInput | BlockScalarWhereInput[]
  }

  export type BlockUpdateManyWithoutReceivedByNestedInput = {
    create?: XOR<BlockCreateWithoutReceivedByInput, BlockUncheckedCreateWithoutReceivedByInput> | BlockCreateWithoutReceivedByInput[] | BlockUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: BlockCreateOrConnectWithoutReceivedByInput | BlockCreateOrConnectWithoutReceivedByInput[]
    upsert?: BlockUpsertWithWhereUniqueWithoutReceivedByInput | BlockUpsertWithWhereUniqueWithoutReceivedByInput[]
    createMany?: BlockCreateManyReceivedByInputEnvelope
    set?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    disconnect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    delete?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    connect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    update?: BlockUpdateWithWhereUniqueWithoutReceivedByInput | BlockUpdateWithWhereUniqueWithoutReceivedByInput[]
    updateMany?: BlockUpdateManyWithWhereWithoutReceivedByInput | BlockUpdateManyWithWhereWithoutReceivedByInput[]
    deleteMany?: BlockScalarWhereInput | BlockScalarWhereInput[]
  }

  export type UserChannelUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserChannelCreateWithoutUserInput, UserChannelUncheckedCreateWithoutUserInput> | UserChannelCreateWithoutUserInput[] | UserChannelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserChannelCreateOrConnectWithoutUserInput | UserChannelCreateOrConnectWithoutUserInput[]
    upsert?: UserChannelUpsertWithWhereUniqueWithoutUserInput | UserChannelUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserChannelCreateManyUserInputEnvelope
    set?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    disconnect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    delete?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    connect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    update?: UserChannelUpdateWithWhereUniqueWithoutUserInput | UserChannelUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserChannelUpdateManyWithWhereWithoutUserInput | UserChannelUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserChannelScalarWhereInput | UserChannelScalarWhereInput[]
  }

  export type ChannelUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ChannelCreateWithoutCreatorInput, ChannelUncheckedCreateWithoutCreatorInput> | ChannelCreateWithoutCreatorInput[] | ChannelUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChannelCreateOrConnectWithoutCreatorInput | ChannelCreateOrConnectWithoutCreatorInput[]
    upsert?: ChannelUpsertWithWhereUniqueWithoutCreatorInput | ChannelUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ChannelCreateManyCreatorInputEnvelope
    set?: ChannelWhereUniqueInput | ChannelWhereUniqueInput[]
    disconnect?: ChannelWhereUniqueInput | ChannelWhereUniqueInput[]
    delete?: ChannelWhereUniqueInput | ChannelWhereUniqueInput[]
    connect?: ChannelWhereUniqueInput | ChannelWhereUniqueInput[]
    update?: ChannelUpdateWithWhereUniqueWithoutCreatorInput | ChannelUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ChannelUpdateManyWithWhereWithoutCreatorInput | ChannelUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ChannelScalarWhereInput | ChannelScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUserInput | MessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUserInput | MessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUserInput | MessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReadByNestedInput = {
    create?: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput> | MessageCreateWithoutReadByInput[] | MessageUncheckedCreateWithoutReadByInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReadByInput | MessageCreateOrConnectWithoutReadByInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReadByInput | MessageUpsertWithWhereUniqueWithoutReadByInput[]
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReadByInput | MessageUpdateWithWhereUniqueWithoutReadByInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReadByInput | MessageUpdateManyWithWhereWithoutReadByInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserMatchUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMatchCreateWithoutUserInput, UserMatchUncheckedCreateWithoutUserInput> | UserMatchCreateWithoutUserInput[] | UserMatchUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMatchCreateOrConnectWithoutUserInput | UserMatchCreateOrConnectWithoutUserInput[]
    upsert?: UserMatchUpsertWithWhereUniqueWithoutUserInput | UserMatchUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMatchCreateManyUserInputEnvelope
    set?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    disconnect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    delete?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    connect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    update?: UserMatchUpdateWithWhereUniqueWithoutUserInput | UserMatchUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMatchUpdateManyWithWhereWithoutUserInput | UserMatchUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMatchScalarWhereInput | UserMatchScalarWhereInput[]
  }

  export type UserFriendshipUncheckedUpdateManyWithoutTargetNestedInput = {
    create?: XOR<UserFriendshipCreateWithoutTargetInput, UserFriendshipUncheckedCreateWithoutTargetInput> | UserFriendshipCreateWithoutTargetInput[] | UserFriendshipUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: UserFriendshipCreateOrConnectWithoutTargetInput | UserFriendshipCreateOrConnectWithoutTargetInput[]
    upsert?: UserFriendshipUpsertWithWhereUniqueWithoutTargetInput | UserFriendshipUpsertWithWhereUniqueWithoutTargetInput[]
    createMany?: UserFriendshipCreateManyTargetInputEnvelope
    set?: UserFriendshipWhereUniqueInput | UserFriendshipWhereUniqueInput[]
    disconnect?: UserFriendshipWhereUniqueInput | UserFriendshipWhereUniqueInput[]
    delete?: UserFriendshipWhereUniqueInput | UserFriendshipWhereUniqueInput[]
    connect?: UserFriendshipWhereUniqueInput | UserFriendshipWhereUniqueInput[]
    update?: UserFriendshipUpdateWithWhereUniqueWithoutTargetInput | UserFriendshipUpdateWithWhereUniqueWithoutTargetInput[]
    updateMany?: UserFriendshipUpdateManyWithWhereWithoutTargetInput | UserFriendshipUpdateManyWithWhereWithoutTargetInput[]
    deleteMany?: UserFriendshipScalarWhereInput | UserFriendshipScalarWhereInput[]
  }

  export type BlockUncheckedUpdateManyWithoutBlockedByNestedInput = {
    create?: XOR<BlockCreateWithoutBlockedByInput, BlockUncheckedCreateWithoutBlockedByInput> | BlockCreateWithoutBlockedByInput[] | BlockUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: BlockCreateOrConnectWithoutBlockedByInput | BlockCreateOrConnectWithoutBlockedByInput[]
    upsert?: BlockUpsertWithWhereUniqueWithoutBlockedByInput | BlockUpsertWithWhereUniqueWithoutBlockedByInput[]
    createMany?: BlockCreateManyBlockedByInputEnvelope
    set?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    disconnect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    delete?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    connect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    update?: BlockUpdateWithWhereUniqueWithoutBlockedByInput | BlockUpdateWithWhereUniqueWithoutBlockedByInput[]
    updateMany?: BlockUpdateManyWithWhereWithoutBlockedByInput | BlockUpdateManyWithWhereWithoutBlockedByInput[]
    deleteMany?: BlockScalarWhereInput | BlockScalarWhereInput[]
  }

  export type BlockUncheckedUpdateManyWithoutReceivedByNestedInput = {
    create?: XOR<BlockCreateWithoutReceivedByInput, BlockUncheckedCreateWithoutReceivedByInput> | BlockCreateWithoutReceivedByInput[] | BlockUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: BlockCreateOrConnectWithoutReceivedByInput | BlockCreateOrConnectWithoutReceivedByInput[]
    upsert?: BlockUpsertWithWhereUniqueWithoutReceivedByInput | BlockUpsertWithWhereUniqueWithoutReceivedByInput[]
    createMany?: BlockCreateManyReceivedByInputEnvelope
    set?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    disconnect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    delete?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    connect?: BlockWhereUniqueInput | BlockWhereUniqueInput[]
    update?: BlockUpdateWithWhereUniqueWithoutReceivedByInput | BlockUpdateWithWhereUniqueWithoutReceivedByInput[]
    updateMany?: BlockUpdateManyWithWhereWithoutReceivedByInput | BlockUpdateManyWithWhereWithoutReceivedByInput[]
    deleteMany?: BlockScalarWhereInput | BlockScalarWhereInput[]
  }

  export type UserChannelUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserChannelCreateWithoutUserInput, UserChannelUncheckedCreateWithoutUserInput> | UserChannelCreateWithoutUserInput[] | UserChannelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserChannelCreateOrConnectWithoutUserInput | UserChannelCreateOrConnectWithoutUserInput[]
    upsert?: UserChannelUpsertWithWhereUniqueWithoutUserInput | UserChannelUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserChannelCreateManyUserInputEnvelope
    set?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    disconnect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    delete?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    connect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    update?: UserChannelUpdateWithWhereUniqueWithoutUserInput | UserChannelUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserChannelUpdateManyWithWhereWithoutUserInput | UserChannelUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserChannelScalarWhereInput | UserChannelScalarWhereInput[]
  }

  export type ChannelUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ChannelCreateWithoutCreatorInput, ChannelUncheckedCreateWithoutCreatorInput> | ChannelCreateWithoutCreatorInput[] | ChannelUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChannelCreateOrConnectWithoutCreatorInput | ChannelCreateOrConnectWithoutCreatorInput[]
    upsert?: ChannelUpsertWithWhereUniqueWithoutCreatorInput | ChannelUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ChannelCreateManyCreatorInputEnvelope
    set?: ChannelWhereUniqueInput | ChannelWhereUniqueInput[]
    disconnect?: ChannelWhereUniqueInput | ChannelWhereUniqueInput[]
    delete?: ChannelWhereUniqueInput | ChannelWhereUniqueInput[]
    connect?: ChannelWhereUniqueInput | ChannelWhereUniqueInput[]
    update?: ChannelUpdateWithWhereUniqueWithoutCreatorInput | ChannelUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ChannelUpdateManyWithWhereWithoutCreatorInput | ChannelUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ChannelScalarWhereInput | ChannelScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUserInput | MessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUserInput | MessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUserInput | MessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReadByNestedInput = {
    create?: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput> | MessageCreateWithoutReadByInput[] | MessageUncheckedCreateWithoutReadByInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReadByInput | MessageCreateOrConnectWithoutReadByInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReadByInput | MessageUpsertWithWhereUniqueWithoutReadByInput[]
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReadByInput | MessageUpdateWithWhereUniqueWithoutReadByInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReadByInput | MessageUpdateManyWithWhereWithoutReadByInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserFriendshipsInput = {
    create?: XOR<UserCreateWithoutUserFriendshipsInput, UserUncheckedCreateWithoutUserFriendshipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFriendshipsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutUserFriendshipsNestedInput = {
    create?: XOR<UserCreateWithoutUserFriendshipsInput, UserUncheckedCreateWithoutUserFriendshipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFriendshipsInput
    upsert?: UserUpsertWithoutUserFriendshipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserFriendshipsInput, UserUpdateWithoutUserFriendshipsInput>, UserUncheckedUpdateWithoutUserFriendshipsInput>
  }

  export type UserMatchCreateNestedManyWithoutMatchInput = {
    create?: XOR<UserMatchCreateWithoutMatchInput, UserMatchUncheckedCreateWithoutMatchInput> | UserMatchCreateWithoutMatchInput[] | UserMatchUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: UserMatchCreateOrConnectWithoutMatchInput | UserMatchCreateOrConnectWithoutMatchInput[]
    createMany?: UserMatchCreateManyMatchInputEnvelope
    connect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
  }

  export type UserMatchUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<UserMatchCreateWithoutMatchInput, UserMatchUncheckedCreateWithoutMatchInput> | UserMatchCreateWithoutMatchInput[] | UserMatchUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: UserMatchCreateOrConnectWithoutMatchInput | UserMatchCreateOrConnectWithoutMatchInput[]
    createMany?: UserMatchCreateManyMatchInputEnvelope
    connect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
  }

  export type UserMatchUpdateManyWithoutMatchNestedInput = {
    create?: XOR<UserMatchCreateWithoutMatchInput, UserMatchUncheckedCreateWithoutMatchInput> | UserMatchCreateWithoutMatchInput[] | UserMatchUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: UserMatchCreateOrConnectWithoutMatchInput | UserMatchCreateOrConnectWithoutMatchInput[]
    upsert?: UserMatchUpsertWithWhereUniqueWithoutMatchInput | UserMatchUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: UserMatchCreateManyMatchInputEnvelope
    set?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    disconnect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    delete?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    connect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    update?: UserMatchUpdateWithWhereUniqueWithoutMatchInput | UserMatchUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: UserMatchUpdateManyWithWhereWithoutMatchInput | UserMatchUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: UserMatchScalarWhereInput | UserMatchScalarWhereInput[]
  }

  export type UserMatchUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<UserMatchCreateWithoutMatchInput, UserMatchUncheckedCreateWithoutMatchInput> | UserMatchCreateWithoutMatchInput[] | UserMatchUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: UserMatchCreateOrConnectWithoutMatchInput | UserMatchCreateOrConnectWithoutMatchInput[]
    upsert?: UserMatchUpsertWithWhereUniqueWithoutMatchInput | UserMatchUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: UserMatchCreateManyMatchInputEnvelope
    set?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    disconnect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    delete?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    connect?: UserMatchWhereUniqueInput | UserMatchWhereUniqueInput[]
    update?: UserMatchUpdateWithWhereUniqueWithoutMatchInput | UserMatchUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: UserMatchUpdateManyWithWhereWithoutMatchInput | UserMatchUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: UserMatchScalarWhereInput | UserMatchScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserMatchesInput = {
    create?: XOR<UserCreateWithoutUserMatchesInput, UserUncheckedCreateWithoutUserMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserMatchesInput
    connect?: UserWhereUniqueInput
  }

  export type MatchCreateNestedOneWithoutUsersInput = {
    create?: XOR<MatchCreateWithoutUsersInput, MatchUncheckedCreateWithoutUsersInput>
    connectOrCreate?: MatchCreateOrConnectWithoutUsersInput
    connect?: MatchWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutUserMatchesNestedInput = {
    create?: XOR<UserCreateWithoutUserMatchesInput, UserUncheckedCreateWithoutUserMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserMatchesInput
    upsert?: UserUpsertWithoutUserMatchesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserMatchesInput, UserUpdateWithoutUserMatchesInput>, UserUncheckedUpdateWithoutUserMatchesInput>
  }

  export type MatchUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<MatchCreateWithoutUsersInput, MatchUncheckedCreateWithoutUsersInput>
    connectOrCreate?: MatchCreateOrConnectWithoutUsersInput
    upsert?: MatchUpsertWithoutUsersInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutUsersInput, MatchUpdateWithoutUsersInput>, MatchUncheckedUpdateWithoutUsersInput>
  }

  export type UserCreateNestedOneWithoutBlocksInitiatedInput = {
    create?: XOR<UserCreateWithoutBlocksInitiatedInput, UserUncheckedCreateWithoutBlocksInitiatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlocksInitiatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBlocksReceivedInput = {
    create?: XOR<UserCreateWithoutBlocksReceivedInput, UserUncheckedCreateWithoutBlocksReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlocksReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutBlocksInitiatedNestedInput = {
    create?: XOR<UserCreateWithoutBlocksInitiatedInput, UserUncheckedCreateWithoutBlocksInitiatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlocksInitiatedInput
    upsert?: UserUpsertWithoutBlocksInitiatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBlocksInitiatedInput, UserUpdateWithoutBlocksInitiatedInput>, UserUncheckedUpdateWithoutBlocksInitiatedInput>
  }

  export type UserUpdateOneRequiredWithoutBlocksReceivedNestedInput = {
    create?: XOR<UserCreateWithoutBlocksReceivedInput, UserUncheckedCreateWithoutBlocksReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlocksReceivedInput
    upsert?: UserUpsertWithoutBlocksReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBlocksReceivedInput, UserUpdateWithoutBlocksReceivedInput>, UserUncheckedUpdateWithoutBlocksReceivedInput>
  }

  export type UserCreateNestedOneWithoutCreatedChannelsInput = {
    create?: XOR<UserCreateWithoutCreatedChannelsInput, UserUncheckedCreateWithoutCreatedChannelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedChannelsInput
    connect?: UserWhereUniqueInput
  }

  export type UserChannelCreateNestedManyWithoutChannelInput = {
    create?: XOR<UserChannelCreateWithoutChannelInput, UserChannelUncheckedCreateWithoutChannelInput> | UserChannelCreateWithoutChannelInput[] | UserChannelUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: UserChannelCreateOrConnectWithoutChannelInput | UserChannelCreateOrConnectWithoutChannelInput[]
    createMany?: UserChannelCreateManyChannelInputEnvelope
    connect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutChannelInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UserChannelUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<UserChannelCreateWithoutChannelInput, UserChannelUncheckedCreateWithoutChannelInput> | UserChannelCreateWithoutChannelInput[] | UserChannelUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: UserChannelCreateOrConnectWithoutChannelInput | UserChannelCreateOrConnectWithoutChannelInput[]
    createMany?: UserChannelCreateManyChannelInputEnvelope
    connect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutCreatedChannelsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedChannelsInput, UserUncheckedCreateWithoutCreatedChannelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedChannelsInput
    upsert?: UserUpsertWithoutCreatedChannelsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedChannelsInput, UserUpdateWithoutCreatedChannelsInput>, UserUncheckedUpdateWithoutCreatedChannelsInput>
  }

  export type UserChannelUpdateManyWithoutChannelNestedInput = {
    create?: XOR<UserChannelCreateWithoutChannelInput, UserChannelUncheckedCreateWithoutChannelInput> | UserChannelCreateWithoutChannelInput[] | UserChannelUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: UserChannelCreateOrConnectWithoutChannelInput | UserChannelCreateOrConnectWithoutChannelInput[]
    upsert?: UserChannelUpsertWithWhereUniqueWithoutChannelInput | UserChannelUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: UserChannelCreateManyChannelInputEnvelope
    set?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    disconnect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    delete?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    connect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    update?: UserChannelUpdateWithWhereUniqueWithoutChannelInput | UserChannelUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: UserChannelUpdateManyWithWhereWithoutChannelInput | UserChannelUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: UserChannelScalarWhereInput | UserChannelScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutChannelNestedInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChannelInput | MessageUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChannelInput | MessageUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChannelInput | MessageUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserChannelUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<UserChannelCreateWithoutChannelInput, UserChannelUncheckedCreateWithoutChannelInput> | UserChannelCreateWithoutChannelInput[] | UserChannelUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: UserChannelCreateOrConnectWithoutChannelInput | UserChannelCreateOrConnectWithoutChannelInput[]
    upsert?: UserChannelUpsertWithWhereUniqueWithoutChannelInput | UserChannelUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: UserChannelCreateManyChannelInputEnvelope
    set?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    disconnect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    delete?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    connect?: UserChannelWhereUniqueInput | UserChannelWhereUniqueInput[]
    update?: UserChannelUpdateWithWhereUniqueWithoutChannelInput | UserChannelUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: UserChannelUpdateManyWithWhereWithoutChannelInput | UserChannelUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: UserChannelScalarWhereInput | UserChannelScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChannelInput | MessageUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChannelInput | MessageUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChannelInput | MessageUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutChannelsInput = {
    create?: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelsInput
    connect?: UserWhereUniqueInput
  }

  export type ChannelCreateNestedOneWithoutUsersInput = {
    create?: XOR<ChannelCreateWithoutUsersInput, ChannelUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutUsersInput
    connect?: ChannelWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutChannelsNestedInput = {
    create?: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelsInput
    upsert?: UserUpsertWithoutChannelsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChannelsInput, UserUpdateWithoutChannelsInput>, UserUncheckedUpdateWithoutChannelsInput>
  }

  export type ChannelUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ChannelCreateWithoutUsersInput, ChannelUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutUsersInput
    upsert?: ChannelUpsertWithoutUsersInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<XOR<ChannelUpdateToOneWithWhereWithoutUsersInput, ChannelUpdateWithoutUsersInput>, ChannelUncheckedUpdateWithoutUsersInput>
  }

  export type UserCreateNestedManyWithoutMessagesReadedInput = {
    create?: XOR<UserCreateWithoutMessagesReadedInput, UserUncheckedCreateWithoutMessagesReadedInput> | UserCreateWithoutMessagesReadedInput[] | UserUncheckedCreateWithoutMessagesReadedInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMessagesReadedInput | UserCreateOrConnectWithoutMessagesReadedInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ChannelCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessagesInput
    connect?: ChannelWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutMessagesReadedInput = {
    create?: XOR<UserCreateWithoutMessagesReadedInput, UserUncheckedCreateWithoutMessagesReadedInput> | UserCreateWithoutMessagesReadedInput[] | UserUncheckedCreateWithoutMessagesReadedInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMessagesReadedInput | UserCreateOrConnectWithoutMessagesReadedInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutMessagesReadedNestedInput = {
    create?: XOR<UserCreateWithoutMessagesReadedInput, UserUncheckedCreateWithoutMessagesReadedInput> | UserCreateWithoutMessagesReadedInput[] | UserUncheckedCreateWithoutMessagesReadedInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMessagesReadedInput | UserCreateOrConnectWithoutMessagesReadedInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMessagesReadedInput | UserUpsertWithWhereUniqueWithoutMessagesReadedInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMessagesReadedInput | UserUpdateWithWhereUniqueWithoutMessagesReadedInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMessagesReadedInput | UserUpdateManyWithWhereWithoutMessagesReadedInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesInput, UserUpdateWithoutMessagesInput>, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type ChannelUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessagesInput
    upsert?: ChannelUpsertWithoutMessagesInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<XOR<ChannelUpdateToOneWithWhereWithoutMessagesInput, ChannelUpdateWithoutMessagesInput>, ChannelUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUncheckedUpdateManyWithoutMessagesReadedNestedInput = {
    create?: XOR<UserCreateWithoutMessagesReadedInput, UserUncheckedCreateWithoutMessagesReadedInput> | UserCreateWithoutMessagesReadedInput[] | UserUncheckedCreateWithoutMessagesReadedInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMessagesReadedInput | UserCreateOrConnectWithoutMessagesReadedInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMessagesReadedInput | UserUpsertWithWhereUniqueWithoutMessagesReadedInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMessagesReadedInput | UserUpdateWithWhereUniqueWithoutMessagesReadedInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMessagesReadedInput | UserUpdateManyWithWhereWithoutMessagesReadedInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserMatchCreateWithoutUserInput = {
    score: number
    isWin: boolean
    match: MatchCreateNestedOneWithoutUsersInput
  }

  export type UserMatchUncheckedCreateWithoutUserInput = {
    id?: number
    matchId: number
    score: number
    isWin: boolean
  }

  export type UserMatchCreateOrConnectWithoutUserInput = {
    where: UserMatchWhereUniqueInput
    create: XOR<UserMatchCreateWithoutUserInput, UserMatchUncheckedCreateWithoutUserInput>
  }

  export type UserMatchCreateManyUserInputEnvelope = {
    data: UserMatchCreateManyUserInput | UserMatchCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserFriendshipCreateWithoutTargetInput = {
    senderId: number
    acceptedAt?: Date | string | null
  }

  export type UserFriendshipUncheckedCreateWithoutTargetInput = {
    id?: number
    senderId: number
    acceptedAt?: Date | string | null
  }

  export type UserFriendshipCreateOrConnectWithoutTargetInput = {
    where: UserFriendshipWhereUniqueInput
    create: XOR<UserFriendshipCreateWithoutTargetInput, UserFriendshipUncheckedCreateWithoutTargetInput>
  }

  export type UserFriendshipCreateManyTargetInputEnvelope = {
    data: UserFriendshipCreateManyTargetInput | UserFriendshipCreateManyTargetInput[]
    skipDuplicates?: boolean
  }

  export type BlockCreateWithoutBlockedByInput = {
    createdAt?: Date | string
    updatedAt?: Date | string | null
    receivedBy: UserCreateNestedOneWithoutBlocksReceivedInput
  }

  export type BlockUncheckedCreateWithoutBlockedByInput = {
    id?: number
    blockedId: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type BlockCreateOrConnectWithoutBlockedByInput = {
    where: BlockWhereUniqueInput
    create: XOR<BlockCreateWithoutBlockedByInput, BlockUncheckedCreateWithoutBlockedByInput>
  }

  export type BlockCreateManyBlockedByInputEnvelope = {
    data: BlockCreateManyBlockedByInput | BlockCreateManyBlockedByInput[]
    skipDuplicates?: boolean
  }

  export type BlockCreateWithoutReceivedByInput = {
    createdAt?: Date | string
    updatedAt?: Date | string | null
    blockedBy: UserCreateNestedOneWithoutBlocksInitiatedInput
  }

  export type BlockUncheckedCreateWithoutReceivedByInput = {
    id?: number
    blockerId: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type BlockCreateOrConnectWithoutReceivedByInput = {
    where: BlockWhereUniqueInput
    create: XOR<BlockCreateWithoutReceivedByInput, BlockUncheckedCreateWithoutReceivedByInput>
  }

  export type BlockCreateManyReceivedByInputEnvelope = {
    data: BlockCreateManyReceivedByInput | BlockCreateManyReceivedByInput[]
    skipDuplicates?: boolean
  }

  export type UserChannelCreateWithoutUserInput = {
    lastRead?: number
    isBlocked?: boolean
    channel: ChannelCreateNestedOneWithoutUsersInput
  }

  export type UserChannelUncheckedCreateWithoutUserInput = {
    id?: number
    channelId: number
    lastRead?: number
    isBlocked?: boolean
  }

  export type UserChannelCreateOrConnectWithoutUserInput = {
    where: UserChannelWhereUniqueInput
    create: XOR<UserChannelCreateWithoutUserInput, UserChannelUncheckedCreateWithoutUserInput>
  }

  export type UserChannelCreateManyUserInputEnvelope = {
    data: UserChannelCreateManyUserInput | UserChannelCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChannelCreateWithoutCreatorInput = {
    conv?: boolean
    name?: string | null
    password?: string | null
    created_at: Date | string
    users?: UserChannelCreateNestedManyWithoutChannelInput
    messages?: MessageCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutCreatorInput = {
    id?: number
    conv?: boolean
    name?: string | null
    password?: string | null
    created_at: Date | string
    users?: UserChannelUncheckedCreateNestedManyWithoutChannelInput
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutCreatorInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutCreatorInput, ChannelUncheckedCreateWithoutCreatorInput>
  }

  export type ChannelCreateManyCreatorInputEnvelope = {
    data: ChannelCreateManyCreatorInput | ChannelCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutUserInput = {
    content: string
    created_at?: Date | string
    readBy?: UserCreateNestedManyWithoutMessagesReadedInput
    channel: ChannelCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutUserInput = {
    id?: number
    content: string
    channelId: number
    created_at?: Date | string
    readBy?: UserUncheckedCreateNestedManyWithoutMessagesReadedInput
  }

  export type MessageCreateOrConnectWithoutUserInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageCreateManyUserInputEnvelope = {
    data: MessageCreateManyUserInput | MessageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutReadByInput = {
    content: string
    created_at?: Date | string
    user: UserCreateNestedOneWithoutMessagesInput
    channel: ChannelCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutReadByInput = {
    id?: number
    content: string
    userId: number
    channelId: number
    created_at?: Date | string
  }

  export type MessageCreateOrConnectWithoutReadByInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput>
  }

  export type UserMatchUpsertWithWhereUniqueWithoutUserInput = {
    where: UserMatchWhereUniqueInput
    update: XOR<UserMatchUpdateWithoutUserInput, UserMatchUncheckedUpdateWithoutUserInput>
    create: XOR<UserMatchCreateWithoutUserInput, UserMatchUncheckedCreateWithoutUserInput>
  }

  export type UserMatchUpdateWithWhereUniqueWithoutUserInput = {
    where: UserMatchWhereUniqueInput
    data: XOR<UserMatchUpdateWithoutUserInput, UserMatchUncheckedUpdateWithoutUserInput>
  }

  export type UserMatchUpdateManyWithWhereWithoutUserInput = {
    where: UserMatchScalarWhereInput
    data: XOR<UserMatchUpdateManyMutationInput, UserMatchUncheckedUpdateManyWithoutUserInput>
  }

  export type UserMatchScalarWhereInput = {
    AND?: UserMatchScalarWhereInput | UserMatchScalarWhereInput[]
    OR?: UserMatchScalarWhereInput[]
    NOT?: UserMatchScalarWhereInput | UserMatchScalarWhereInput[]
    id?: IntFilter<"UserMatch"> | number
    userId?: IntFilter<"UserMatch"> | number
    matchId?: IntFilter<"UserMatch"> | number
    score?: IntFilter<"UserMatch"> | number
    isWin?: BoolFilter<"UserMatch"> | boolean
  }

  export type UserFriendshipUpsertWithWhereUniqueWithoutTargetInput = {
    where: UserFriendshipWhereUniqueInput
    update: XOR<UserFriendshipUpdateWithoutTargetInput, UserFriendshipUncheckedUpdateWithoutTargetInput>
    create: XOR<UserFriendshipCreateWithoutTargetInput, UserFriendshipUncheckedCreateWithoutTargetInput>
  }

  export type UserFriendshipUpdateWithWhereUniqueWithoutTargetInput = {
    where: UserFriendshipWhereUniqueInput
    data: XOR<UserFriendshipUpdateWithoutTargetInput, UserFriendshipUncheckedUpdateWithoutTargetInput>
  }

  export type UserFriendshipUpdateManyWithWhereWithoutTargetInput = {
    where: UserFriendshipScalarWhereInput
    data: XOR<UserFriendshipUpdateManyMutationInput, UserFriendshipUncheckedUpdateManyWithoutTargetInput>
  }

  export type UserFriendshipScalarWhereInput = {
    AND?: UserFriendshipScalarWhereInput | UserFriendshipScalarWhereInput[]
    OR?: UserFriendshipScalarWhereInput[]
    NOT?: UserFriendshipScalarWhereInput | UserFriendshipScalarWhereInput[]
    id?: IntFilter<"UserFriendship"> | number
    senderId?: IntFilter<"UserFriendship"> | number
    targetId?: IntFilter<"UserFriendship"> | number
    acceptedAt?: DateTimeNullableFilter<"UserFriendship"> | Date | string | null
  }

  export type BlockUpsertWithWhereUniqueWithoutBlockedByInput = {
    where: BlockWhereUniqueInput
    update: XOR<BlockUpdateWithoutBlockedByInput, BlockUncheckedUpdateWithoutBlockedByInput>
    create: XOR<BlockCreateWithoutBlockedByInput, BlockUncheckedCreateWithoutBlockedByInput>
  }

  export type BlockUpdateWithWhereUniqueWithoutBlockedByInput = {
    where: BlockWhereUniqueInput
    data: XOR<BlockUpdateWithoutBlockedByInput, BlockUncheckedUpdateWithoutBlockedByInput>
  }

  export type BlockUpdateManyWithWhereWithoutBlockedByInput = {
    where: BlockScalarWhereInput
    data: XOR<BlockUpdateManyMutationInput, BlockUncheckedUpdateManyWithoutBlockedByInput>
  }

  export type BlockScalarWhereInput = {
    AND?: BlockScalarWhereInput | BlockScalarWhereInput[]
    OR?: BlockScalarWhereInput[]
    NOT?: BlockScalarWhereInput | BlockScalarWhereInput[]
    id?: IntFilter<"Block"> | number
    blockerId?: IntFilter<"Block"> | number
    blockedId?: IntFilter<"Block"> | number
    createdAt?: DateTimeFilter<"Block"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Block"> | Date | string | null
  }

  export type BlockUpsertWithWhereUniqueWithoutReceivedByInput = {
    where: BlockWhereUniqueInput
    update: XOR<BlockUpdateWithoutReceivedByInput, BlockUncheckedUpdateWithoutReceivedByInput>
    create: XOR<BlockCreateWithoutReceivedByInput, BlockUncheckedCreateWithoutReceivedByInput>
  }

  export type BlockUpdateWithWhereUniqueWithoutReceivedByInput = {
    where: BlockWhereUniqueInput
    data: XOR<BlockUpdateWithoutReceivedByInput, BlockUncheckedUpdateWithoutReceivedByInput>
  }

  export type BlockUpdateManyWithWhereWithoutReceivedByInput = {
    where: BlockScalarWhereInput
    data: XOR<BlockUpdateManyMutationInput, BlockUncheckedUpdateManyWithoutReceivedByInput>
  }

  export type UserChannelUpsertWithWhereUniqueWithoutUserInput = {
    where: UserChannelWhereUniqueInput
    update: XOR<UserChannelUpdateWithoutUserInput, UserChannelUncheckedUpdateWithoutUserInput>
    create: XOR<UserChannelCreateWithoutUserInput, UserChannelUncheckedCreateWithoutUserInput>
  }

  export type UserChannelUpdateWithWhereUniqueWithoutUserInput = {
    where: UserChannelWhereUniqueInput
    data: XOR<UserChannelUpdateWithoutUserInput, UserChannelUncheckedUpdateWithoutUserInput>
  }

  export type UserChannelUpdateManyWithWhereWithoutUserInput = {
    where: UserChannelScalarWhereInput
    data: XOR<UserChannelUpdateManyMutationInput, UserChannelUncheckedUpdateManyWithoutUserInput>
  }

  export type UserChannelScalarWhereInput = {
    AND?: UserChannelScalarWhereInput | UserChannelScalarWhereInput[]
    OR?: UserChannelScalarWhereInput[]
    NOT?: UserChannelScalarWhereInput | UserChannelScalarWhereInput[]
    id?: IntFilter<"UserChannel"> | number
    userId?: IntFilter<"UserChannel"> | number
    channelId?: IntFilter<"UserChannel"> | number
    lastRead?: IntFilter<"UserChannel"> | number
    isBlocked?: BoolFilter<"UserChannel"> | boolean
  }

  export type ChannelUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ChannelWhereUniqueInput
    update: XOR<ChannelUpdateWithoutCreatorInput, ChannelUncheckedUpdateWithoutCreatorInput>
    create: XOR<ChannelCreateWithoutCreatorInput, ChannelUncheckedCreateWithoutCreatorInput>
  }

  export type ChannelUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ChannelWhereUniqueInput
    data: XOR<ChannelUpdateWithoutCreatorInput, ChannelUncheckedUpdateWithoutCreatorInput>
  }

  export type ChannelUpdateManyWithWhereWithoutCreatorInput = {
    where: ChannelScalarWhereInput
    data: XOR<ChannelUpdateManyMutationInput, ChannelUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ChannelScalarWhereInput = {
    AND?: ChannelScalarWhereInput | ChannelScalarWhereInput[]
    OR?: ChannelScalarWhereInput[]
    NOT?: ChannelScalarWhereInput | ChannelScalarWhereInput[]
    id?: IntFilter<"Channel"> | number
    conv?: BoolFilter<"Channel"> | boolean
    name?: StringNullableFilter<"Channel"> | string | null
    password?: StringNullableFilter<"Channel"> | string | null
    creatorId?: IntNullableFilter<"Channel"> | number | null
    created_at?: DateTimeFilter<"Channel"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
  }

  export type MessageUpdateManyWithWhereWithoutUserInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutUserInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    userId?: IntFilter<"Message"> | number
    channelId?: IntFilter<"Message"> | number
    created_at?: DateTimeFilter<"Message"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutReadByInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReadByInput, MessageUncheckedUpdateWithoutReadByInput>
    create: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReadByInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReadByInput, MessageUncheckedUpdateWithoutReadByInput>
  }

  export type MessageUpdateManyWithWhereWithoutReadByInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReadByInput>
  }

  export type UserCreateWithoutUserFriendshipsInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchCreateNestedManyWithoutUserInput
    blocksInitiated?: BlockCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelCreateNestedManyWithoutUserInput
    createdChannels?: ChannelCreateNestedManyWithoutCreatorInput
    messages?: MessageCreateNestedManyWithoutUserInput
    messagesReaded?: MessageCreateNestedManyWithoutReadByInput
  }

  export type UserUncheckedCreateWithoutUserFriendshipsInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchUncheckedCreateNestedManyWithoutUserInput
    blocksInitiated?: BlockUncheckedCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockUncheckedCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelUncheckedCreateNestedManyWithoutUserInput
    createdChannels?: ChannelUncheckedCreateNestedManyWithoutCreatorInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    messagesReaded?: MessageUncheckedCreateNestedManyWithoutReadByInput
  }

  export type UserCreateOrConnectWithoutUserFriendshipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserFriendshipsInput, UserUncheckedCreateWithoutUserFriendshipsInput>
  }

  export type UserUpsertWithoutUserFriendshipsInput = {
    update: XOR<UserUpdateWithoutUserFriendshipsInput, UserUncheckedUpdateWithoutUserFriendshipsInput>
    create: XOR<UserCreateWithoutUserFriendshipsInput, UserUncheckedCreateWithoutUserFriendshipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserFriendshipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserFriendshipsInput, UserUncheckedUpdateWithoutUserFriendshipsInput>
  }

  export type UserUpdateWithoutUserFriendshipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUpdateManyWithoutUserNestedInput
    blocksInitiated?: BlockUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUpdateManyWithoutCreatorNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUpdateManyWithoutReadByNestedInput
  }

  export type UserUncheckedUpdateWithoutUserFriendshipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUncheckedUpdateManyWithoutUserNestedInput
    blocksInitiated?: BlockUncheckedUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUncheckedUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUncheckedUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUncheckedUpdateManyWithoutCreatorNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUncheckedUpdateManyWithoutReadByNestedInput
  }

  export type UserMatchCreateWithoutMatchInput = {
    score: number
    isWin: boolean
    user: UserCreateNestedOneWithoutUserMatchesInput
  }

  export type UserMatchUncheckedCreateWithoutMatchInput = {
    id?: number
    userId: number
    score: number
    isWin: boolean
  }

  export type UserMatchCreateOrConnectWithoutMatchInput = {
    where: UserMatchWhereUniqueInput
    create: XOR<UserMatchCreateWithoutMatchInput, UserMatchUncheckedCreateWithoutMatchInput>
  }

  export type UserMatchCreateManyMatchInputEnvelope = {
    data: UserMatchCreateManyMatchInput | UserMatchCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type UserMatchUpsertWithWhereUniqueWithoutMatchInput = {
    where: UserMatchWhereUniqueInput
    update: XOR<UserMatchUpdateWithoutMatchInput, UserMatchUncheckedUpdateWithoutMatchInput>
    create: XOR<UserMatchCreateWithoutMatchInput, UserMatchUncheckedCreateWithoutMatchInput>
  }

  export type UserMatchUpdateWithWhereUniqueWithoutMatchInput = {
    where: UserMatchWhereUniqueInput
    data: XOR<UserMatchUpdateWithoutMatchInput, UserMatchUncheckedUpdateWithoutMatchInput>
  }

  export type UserMatchUpdateManyWithWhereWithoutMatchInput = {
    where: UserMatchScalarWhereInput
    data: XOR<UserMatchUpdateManyMutationInput, UserMatchUncheckedUpdateManyWithoutMatchInput>
  }

  export type UserCreateWithoutUserMatchesInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userFriendships?: UserFriendshipCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelCreateNestedManyWithoutUserInput
    createdChannels?: ChannelCreateNestedManyWithoutCreatorInput
    messages?: MessageCreateNestedManyWithoutUserInput
    messagesReaded?: MessageCreateNestedManyWithoutReadByInput
  }

  export type UserUncheckedCreateWithoutUserMatchesInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userFriendships?: UserFriendshipUncheckedCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockUncheckedCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockUncheckedCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelUncheckedCreateNestedManyWithoutUserInput
    createdChannels?: ChannelUncheckedCreateNestedManyWithoutCreatorInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    messagesReaded?: MessageUncheckedCreateNestedManyWithoutReadByInput
  }

  export type UserCreateOrConnectWithoutUserMatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserMatchesInput, UserUncheckedCreateWithoutUserMatchesInput>
  }

  export type MatchCreateWithoutUsersInput = {

  }

  export type MatchUncheckedCreateWithoutUsersInput = {
    id?: number
  }

  export type MatchCreateOrConnectWithoutUsersInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutUsersInput, MatchUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutUserMatchesInput = {
    update: XOR<UserUpdateWithoutUserMatchesInput, UserUncheckedUpdateWithoutUserMatchesInput>
    create: XOR<UserCreateWithoutUserMatchesInput, UserUncheckedCreateWithoutUserMatchesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserMatchesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserMatchesInput, UserUncheckedUpdateWithoutUserMatchesInput>
  }

  export type UserUpdateWithoutUserMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userFriendships?: UserFriendshipUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUpdateManyWithoutCreatorNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUpdateManyWithoutReadByNestedInput
  }

  export type UserUncheckedUpdateWithoutUserMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userFriendships?: UserFriendshipUncheckedUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUncheckedUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUncheckedUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUncheckedUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUncheckedUpdateManyWithoutCreatorNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUncheckedUpdateManyWithoutReadByNestedInput
  }

  export type MatchUpsertWithoutUsersInput = {
    update: XOR<MatchUpdateWithoutUsersInput, MatchUncheckedUpdateWithoutUsersInput>
    create: XOR<MatchCreateWithoutUsersInput, MatchUncheckedCreateWithoutUsersInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutUsersInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutUsersInput, MatchUncheckedUpdateWithoutUsersInput>
  }

  export type MatchUpdateWithoutUsersInput = {

  }

  export type MatchUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutBlocksInitiatedInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipCreateNestedManyWithoutTargetInput
    blocksReceived?: BlockCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelCreateNestedManyWithoutUserInput
    createdChannels?: ChannelCreateNestedManyWithoutCreatorInput
    messages?: MessageCreateNestedManyWithoutUserInput
    messagesReaded?: MessageCreateNestedManyWithoutReadByInput
  }

  export type UserUncheckedCreateWithoutBlocksInitiatedInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchUncheckedCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipUncheckedCreateNestedManyWithoutTargetInput
    blocksReceived?: BlockUncheckedCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelUncheckedCreateNestedManyWithoutUserInput
    createdChannels?: ChannelUncheckedCreateNestedManyWithoutCreatorInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    messagesReaded?: MessageUncheckedCreateNestedManyWithoutReadByInput
  }

  export type UserCreateOrConnectWithoutBlocksInitiatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBlocksInitiatedInput, UserUncheckedCreateWithoutBlocksInitiatedInput>
  }

  export type UserCreateWithoutBlocksReceivedInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockCreateNestedManyWithoutBlockedByInput
    channels?: UserChannelCreateNestedManyWithoutUserInput
    createdChannels?: ChannelCreateNestedManyWithoutCreatorInput
    messages?: MessageCreateNestedManyWithoutUserInput
    messagesReaded?: MessageCreateNestedManyWithoutReadByInput
  }

  export type UserUncheckedCreateWithoutBlocksReceivedInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchUncheckedCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipUncheckedCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockUncheckedCreateNestedManyWithoutBlockedByInput
    channels?: UserChannelUncheckedCreateNestedManyWithoutUserInput
    createdChannels?: ChannelUncheckedCreateNestedManyWithoutCreatorInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    messagesReaded?: MessageUncheckedCreateNestedManyWithoutReadByInput
  }

  export type UserCreateOrConnectWithoutBlocksReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBlocksReceivedInput, UserUncheckedCreateWithoutBlocksReceivedInput>
  }

  export type UserUpsertWithoutBlocksInitiatedInput = {
    update: XOR<UserUpdateWithoutBlocksInitiatedInput, UserUncheckedUpdateWithoutBlocksInitiatedInput>
    create: XOR<UserCreateWithoutBlocksInitiatedInput, UserUncheckedCreateWithoutBlocksInitiatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBlocksInitiatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBlocksInitiatedInput, UserUncheckedUpdateWithoutBlocksInitiatedInput>
  }

  export type UserUpdateWithoutBlocksInitiatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUpdateManyWithoutTargetNestedInput
    blocksReceived?: BlockUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUpdateManyWithoutCreatorNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUpdateManyWithoutReadByNestedInput
  }

  export type UserUncheckedUpdateWithoutBlocksInitiatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUncheckedUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUncheckedUpdateManyWithoutTargetNestedInput
    blocksReceived?: BlockUncheckedUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUncheckedUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUncheckedUpdateManyWithoutCreatorNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUncheckedUpdateManyWithoutReadByNestedInput
  }

  export type UserUpsertWithoutBlocksReceivedInput = {
    update: XOR<UserUpdateWithoutBlocksReceivedInput, UserUncheckedUpdateWithoutBlocksReceivedInput>
    create: XOR<UserCreateWithoutBlocksReceivedInput, UserUncheckedCreateWithoutBlocksReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBlocksReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBlocksReceivedInput, UserUncheckedUpdateWithoutBlocksReceivedInput>
  }

  export type UserUpdateWithoutBlocksReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUpdateManyWithoutBlockedByNestedInput
    channels?: UserChannelUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUpdateManyWithoutCreatorNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUpdateManyWithoutReadByNestedInput
  }

  export type UserUncheckedUpdateWithoutBlocksReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUncheckedUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUncheckedUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUncheckedUpdateManyWithoutBlockedByNestedInput
    channels?: UserChannelUncheckedUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUncheckedUpdateManyWithoutCreatorNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUncheckedUpdateManyWithoutReadByNestedInput
  }

  export type UserCreateWithoutCreatedChannelsInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    messagesReaded?: MessageCreateNestedManyWithoutReadByInput
  }

  export type UserUncheckedCreateWithoutCreatedChannelsInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchUncheckedCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipUncheckedCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockUncheckedCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockUncheckedCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    messagesReaded?: MessageUncheckedCreateNestedManyWithoutReadByInput
  }

  export type UserCreateOrConnectWithoutCreatedChannelsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedChannelsInput, UserUncheckedCreateWithoutCreatedChannelsInput>
  }

  export type UserChannelCreateWithoutChannelInput = {
    lastRead?: number
    isBlocked?: boolean
    user: UserCreateNestedOneWithoutChannelsInput
  }

  export type UserChannelUncheckedCreateWithoutChannelInput = {
    id?: number
    userId: number
    lastRead?: number
    isBlocked?: boolean
  }

  export type UserChannelCreateOrConnectWithoutChannelInput = {
    where: UserChannelWhereUniqueInput
    create: XOR<UserChannelCreateWithoutChannelInput, UserChannelUncheckedCreateWithoutChannelInput>
  }

  export type UserChannelCreateManyChannelInputEnvelope = {
    data: UserChannelCreateManyChannelInput | UserChannelCreateManyChannelInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutChannelInput = {
    content: string
    created_at?: Date | string
    readBy?: UserCreateNestedManyWithoutMessagesReadedInput
    user: UserCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutChannelInput = {
    id?: number
    content: string
    userId: number
    created_at?: Date | string
    readBy?: UserUncheckedCreateNestedManyWithoutMessagesReadedInput
  }

  export type MessageCreateOrConnectWithoutChannelInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput>
  }

  export type MessageCreateManyChannelInputEnvelope = {
    data: MessageCreateManyChannelInput | MessageCreateManyChannelInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedChannelsInput = {
    update: XOR<UserUpdateWithoutCreatedChannelsInput, UserUncheckedUpdateWithoutCreatedChannelsInput>
    create: XOR<UserCreateWithoutCreatedChannelsInput, UserUncheckedCreateWithoutCreatedChannelsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedChannelsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedChannelsInput, UserUncheckedUpdateWithoutCreatedChannelsInput>
  }

  export type UserUpdateWithoutCreatedChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUpdateManyWithoutReadByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUncheckedUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUncheckedUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUncheckedUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUncheckedUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUncheckedUpdateManyWithoutReadByNestedInput
  }

  export type UserChannelUpsertWithWhereUniqueWithoutChannelInput = {
    where: UserChannelWhereUniqueInput
    update: XOR<UserChannelUpdateWithoutChannelInput, UserChannelUncheckedUpdateWithoutChannelInput>
    create: XOR<UserChannelCreateWithoutChannelInput, UserChannelUncheckedCreateWithoutChannelInput>
  }

  export type UserChannelUpdateWithWhereUniqueWithoutChannelInput = {
    where: UserChannelWhereUniqueInput
    data: XOR<UserChannelUpdateWithoutChannelInput, UserChannelUncheckedUpdateWithoutChannelInput>
  }

  export type UserChannelUpdateManyWithWhereWithoutChannelInput = {
    where: UserChannelScalarWhereInput
    data: XOR<UserChannelUpdateManyMutationInput, UserChannelUncheckedUpdateManyWithoutChannelInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutChannelInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChannelInput, MessageUncheckedUpdateWithoutChannelInput>
    create: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChannelInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChannelInput, MessageUncheckedUpdateWithoutChannelInput>
  }

  export type MessageUpdateManyWithWhereWithoutChannelInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutChannelInput>
  }

  export type UserCreateWithoutChannelsInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockCreateNestedManyWithoutReceivedByInput
    createdChannels?: ChannelCreateNestedManyWithoutCreatorInput
    messages?: MessageCreateNestedManyWithoutUserInput
    messagesReaded?: MessageCreateNestedManyWithoutReadByInput
  }

  export type UserUncheckedCreateWithoutChannelsInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchUncheckedCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipUncheckedCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockUncheckedCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockUncheckedCreateNestedManyWithoutReceivedByInput
    createdChannels?: ChannelUncheckedCreateNestedManyWithoutCreatorInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    messagesReaded?: MessageUncheckedCreateNestedManyWithoutReadByInput
  }

  export type UserCreateOrConnectWithoutChannelsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
  }

  export type ChannelCreateWithoutUsersInput = {
    conv?: boolean
    name?: string | null
    password?: string | null
    created_at: Date | string
    creator?: UserCreateNestedOneWithoutCreatedChannelsInput
    messages?: MessageCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutUsersInput = {
    id?: number
    conv?: boolean
    name?: string | null
    password?: string | null
    creatorId?: number | null
    created_at: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutUsersInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutUsersInput, ChannelUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutChannelsInput = {
    update: XOR<UserUpdateWithoutChannelsInput, UserUncheckedUpdateWithoutChannelsInput>
    create: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChannelsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChannelsInput, UserUncheckedUpdateWithoutChannelsInput>
  }

  export type UserUpdateWithoutChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUpdateManyWithoutReceivedByNestedInput
    createdChannels?: ChannelUpdateManyWithoutCreatorNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUpdateManyWithoutReadByNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUncheckedUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUncheckedUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUncheckedUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUncheckedUpdateManyWithoutReceivedByNestedInput
    createdChannels?: ChannelUncheckedUpdateManyWithoutCreatorNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    messagesReaded?: MessageUncheckedUpdateManyWithoutReadByNestedInput
  }

  export type ChannelUpsertWithoutUsersInput = {
    update: XOR<ChannelUpdateWithoutUsersInput, ChannelUncheckedUpdateWithoutUsersInput>
    create: XOR<ChannelCreateWithoutUsersInput, ChannelUncheckedCreateWithoutUsersInput>
    where?: ChannelWhereInput
  }

  export type ChannelUpdateToOneWithWhereWithoutUsersInput = {
    where?: ChannelWhereInput
    data: XOR<ChannelUpdateWithoutUsersInput, ChannelUncheckedUpdateWithoutUsersInput>
  }

  export type ChannelUpdateWithoutUsersInput = {
    conv?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedChannelsNestedInput
    messages?: MessageUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    conv?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type UserCreateWithoutMessagesReadedInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelCreateNestedManyWithoutUserInput
    createdChannels?: ChannelCreateNestedManyWithoutCreatorInput
    messages?: MessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesReadedInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchUncheckedCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipUncheckedCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockUncheckedCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockUncheckedCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelUncheckedCreateNestedManyWithoutUserInput
    createdChannels?: ChannelUncheckedCreateNestedManyWithoutCreatorInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesReadedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesReadedInput, UserUncheckedCreateWithoutMessagesReadedInput>
  }

  export type UserCreateWithoutMessagesInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelCreateNestedManyWithoutUserInput
    createdChannels?: ChannelCreateNestedManyWithoutCreatorInput
    messagesReaded?: MessageCreateNestedManyWithoutReadByInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id: number
    avatar: string
    username: string
    secretO2FA?: string | null
    session?: string | null
    xp: number
    role?: number
    status?: $Enums.Status
    userMatches?: UserMatchUncheckedCreateNestedManyWithoutUserInput
    userFriendships?: UserFriendshipUncheckedCreateNestedManyWithoutTargetInput
    blocksInitiated?: BlockUncheckedCreateNestedManyWithoutBlockedByInput
    blocksReceived?: BlockUncheckedCreateNestedManyWithoutReceivedByInput
    channels?: UserChannelUncheckedCreateNestedManyWithoutUserInput
    createdChannels?: ChannelUncheckedCreateNestedManyWithoutCreatorInput
    messagesReaded?: MessageUncheckedCreateNestedManyWithoutReadByInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type ChannelCreateWithoutMessagesInput = {
    conv?: boolean
    name?: string | null
    password?: string | null
    created_at: Date | string
    creator?: UserCreateNestedOneWithoutCreatedChannelsInput
    users?: UserChannelCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutMessagesInput = {
    id?: number
    conv?: boolean
    name?: string | null
    password?: string | null
    creatorId?: number | null
    created_at: Date | string
    users?: UserChannelUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutMessagesInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpsertWithWhereUniqueWithoutMessagesReadedInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutMessagesReadedInput, UserUncheckedUpdateWithoutMessagesReadedInput>
    create: XOR<UserCreateWithoutMessagesReadedInput, UserUncheckedCreateWithoutMessagesReadedInput>
  }

  export type UserUpdateWithWhereUniqueWithoutMessagesReadedInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutMessagesReadedInput, UserUncheckedUpdateWithoutMessagesReadedInput>
  }

  export type UserUpdateManyWithWhereWithoutMessagesReadedInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutMessagesReadedInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    avatar?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    secretO2FA?: StringNullableFilter<"User"> | string | null
    session?: StringNullableFilter<"User"> | string | null
    xp?: IntFilter<"User"> | number
    role?: IntFilter<"User"> | number
    status?: EnumStatusFilter<"User"> | $Enums.Status
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUpdateManyWithoutCreatorNestedInput
    messagesReaded?: MessageUpdateManyWithoutReadByNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUncheckedUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUncheckedUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUncheckedUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUncheckedUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUncheckedUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUncheckedUpdateManyWithoutCreatorNestedInput
    messagesReaded?: MessageUncheckedUpdateManyWithoutReadByNestedInput
  }

  export type ChannelUpsertWithoutMessagesInput = {
    update: XOR<ChannelUpdateWithoutMessagesInput, ChannelUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    where?: ChannelWhereInput
  }

  export type ChannelUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChannelWhereInput
    data: XOR<ChannelUpdateWithoutMessagesInput, ChannelUncheckedUpdateWithoutMessagesInput>
  }

  export type ChannelUpdateWithoutMessagesInput = {
    conv?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedChannelsNestedInput
    users?: UserChannelUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    conv?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserChannelUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type UserMatchCreateManyUserInput = {
    id?: number
    matchId: number
    score: number
    isWin: boolean
  }

  export type UserFriendshipCreateManyTargetInput = {
    id?: number
    senderId: number
    acceptedAt?: Date | string | null
  }

  export type BlockCreateManyBlockedByInput = {
    id?: number
    blockedId: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type BlockCreateManyReceivedByInput = {
    id?: number
    blockerId: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type UserChannelCreateManyUserInput = {
    id?: number
    channelId: number
    lastRead?: number
    isBlocked?: boolean
  }

  export type ChannelCreateManyCreatorInput = {
    id?: number
    conv?: boolean
    name?: string | null
    password?: string | null
    created_at: Date | string
  }

  export type MessageCreateManyUserInput = {
    id?: number
    content: string
    channelId: number
    created_at?: Date | string
  }

  export type UserMatchUpdateWithoutUserInput = {
    score?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    match?: MatchUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserMatchUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserMatchUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserFriendshipUpdateWithoutTargetInput = {
    senderId?: IntFieldUpdateOperationsInput | number
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserFriendshipUncheckedUpdateWithoutTargetInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserFriendshipUncheckedUpdateManyWithoutTargetInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BlockUpdateWithoutBlockedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedBy?: UserUpdateOneRequiredWithoutBlocksReceivedNestedInput
  }

  export type BlockUncheckedUpdateWithoutBlockedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BlockUncheckedUpdateManyWithoutBlockedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BlockUpdateWithoutReceivedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    blockedBy?: UserUpdateOneRequiredWithoutBlocksInitiatedNestedInput
  }

  export type BlockUncheckedUpdateWithoutReceivedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BlockUncheckedUpdateManyWithoutReceivedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserChannelUpdateWithoutUserInput = {
    lastRead?: IntFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    channel?: ChannelUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserChannelUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    lastRead?: IntFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserChannelUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    lastRead?: IntFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChannelUpdateWithoutCreatorInput = {
    conv?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserChannelUpdateManyWithoutChannelNestedInput
    messages?: MessageUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    conv?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserChannelUncheckedUpdateManyWithoutChannelNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    conv?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    readBy?: UserUpdateManyWithoutMessagesReadedNestedInput
    channel?: ChannelUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    channelId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    readBy?: UserUncheckedUpdateManyWithoutMessagesReadedNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    channelId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutReadByInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    channel?: ChannelUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutReadByInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutReadByInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchCreateManyMatchInput = {
    id?: number
    userId: number
    score: number
    isWin: boolean
  }

  export type UserMatchUpdateWithoutMatchInput = {
    score?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserMatchesNestedInput
  }

  export type UserMatchUncheckedUpdateWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserMatchUncheckedUpdateManyWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserChannelCreateManyChannelInput = {
    id?: number
    userId: number
    lastRead?: number
    isBlocked?: boolean
  }

  export type MessageCreateManyChannelInput = {
    id?: number
    content: string
    userId: number
    created_at?: Date | string
  }

  export type UserChannelUpdateWithoutChannelInput = {
    lastRead?: IntFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutChannelsNestedInput
  }

  export type UserChannelUncheckedUpdateWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    lastRead?: IntFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserChannelUncheckedUpdateManyWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    lastRead?: IntFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUpdateWithoutChannelInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    readBy?: UserUpdateManyWithoutMessagesReadedNestedInput
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    readBy?: UserUncheckedUpdateManyWithoutMessagesReadedNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutMessagesReadedInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUpdateManyWithoutCreatorNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesReadedInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    userMatches?: UserMatchUncheckedUpdateManyWithoutUserNestedInput
    userFriendships?: UserFriendshipUncheckedUpdateManyWithoutTargetNestedInput
    blocksInitiated?: BlockUncheckedUpdateManyWithoutBlockedByNestedInput
    blocksReceived?: BlockUncheckedUpdateManyWithoutReceivedByNestedInput
    channels?: UserChannelUncheckedUpdateManyWithoutUserNestedInput
    createdChannels?: ChannelUncheckedUpdateManyWithoutCreatorNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutMessagesReadedInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    secretO2FA?: NullableStringFieldUpdateOperationsInput | string | null
    session?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchCountOutputTypeDefaultArgs instead
     */
    export type MatchCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MatchCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelCountOutputTypeDefaultArgs instead
     */
    export type ChannelCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ChannelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageCountOutputTypeDefaultArgs instead
     */
    export type MessageCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MessageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserFriendshipDefaultArgs instead
     */
    export type UserFriendshipArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserFriendshipDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchDefaultArgs instead
     */
    export type MatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserMatchDefaultArgs instead
     */
    export type UserMatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserMatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlockDefaultArgs instead
     */
    export type BlockArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = BlockDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelDefaultArgs instead
     */
    export type ChannelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ChannelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserChannelDefaultArgs instead
     */
    export type UserChannelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserChannelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}